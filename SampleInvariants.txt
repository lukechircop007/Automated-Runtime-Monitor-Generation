===========================================================================
transactionsystem.Interface:::OBJECT
this.ts != null
this.ts.users != null
this.ts.users[] elements != null
this.ts.users[].getClass().getName() elements == transactionsystem.UserInfo.class
this.ts.next_user_id != null
===========================================================================
transactionsystem.Interface.ADMIN_activateUser(java.lang.Integer):::ENTER
uid != null
===========================================================================
transactionsystem.Interface.ADMIN_activateUser(java.lang.Integer):::EXIT
this.ts == orig(this.ts)
this.ts.initialised == orig(this.ts.initialised)
this.ts.users == orig(this.ts.users)
this.ts.users[] == orig(this.ts.users[])
this.ts.next_user_id == orig(this.ts.next_user_id)
===========================================================================
transactionsystem.Interface.ADMIN_approveOpenAccount(java.lang.Integer, java.lang.String):::ENTER
this.ts.initialised == true
uid != null
account_number != null
===========================================================================
transactionsystem.Interface.ADMIN_approveOpenAccount(java.lang.Integer, java.lang.String):::EXIT
this.ts == orig(this.ts)
this.ts.initialised == orig(this.ts.initialised)
this.ts.users == orig(this.ts.users)
this.ts.users[] == orig(this.ts.users[])
this.ts.next_user_id == orig(this.ts.next_user_id)
this.ts.initialised == true
account_number.toString == orig(account_number.toString)
===========================================================================
transactionsystem.Interface.ADMIN_createUser(java.lang.String, java.lang.String):::ENTER
name != null
country != null
name.toString != country.toString
===========================================================================
transactionsystem.Interface.ADMIN_createUser(java.lang.String, java.lang.String):::EXIT
this.ts == orig(this.ts)
this.ts.initialised == orig(this.ts.initialised)
this.ts.users == orig(this.ts.users)
return == orig(this.ts.next_user_id)
size(this.ts.users[])-1 == orig(size(this.ts.users[]))
return != null
name.toString != country.toString
name.toString == orig(name.toString)
country.toString == orig(country.toString)
===========================================================================
transactionsystem.Interface.ADMIN_disableUser(java.lang.Integer):::ENTER
this.ts.initialised == true
this.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo]
this.ts.next_user_id has only one value
uid has only one value
size(this.ts.users[]) == 2
===========================================================================
transactionsystem.Interface.ADMIN_disableUser(java.lang.Integer):::EXIT
this.ts == orig(this.ts)
this.ts.initialised == orig(this.ts.initialised)
this.ts.users == orig(this.ts.users)
this.ts.users[] == orig(this.ts.users[])
this.ts.next_user_id == orig(this.ts.next_user_id)
this.ts.initialised == true
this.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo]
this.ts.next_user_id has only one value
size(this.ts.users[]) == 2
===========================================================================
transactionsystem.Interface.ADMIN_greylistUser(java.lang.Integer):::ENTER
this.ts.initialised == true
this.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo]
this.ts.next_user_id has only one value
uid has only one value
size(this.ts.users[]) == 3
===========================================================================
transactionsystem.Interface.ADMIN_greylistUser(java.lang.Integer):::EXIT
this.ts == orig(this.ts)
this.ts.initialised == orig(this.ts.initialised)
this.ts.users == orig(this.ts.users)
this.ts.users[] == orig(this.ts.users[])
this.ts.next_user_id == orig(this.ts.next_user_id)
this.ts.initialised == true
this.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo]
this.ts.next_user_id has only one value
size(this.ts.users[]) == 3
===========================================================================
transactionsystem.Interface.ADMIN_initialise():::ENTER
this.ts.initialised == false
this.ts.users[] == []
this.ts.users[].getClass().getName() == []
this.ts.next_user_id has only one value
===========================================================================
transactionsystem.Interface.ADMIN_initialise():::EXIT
this.ts == orig(this.ts)
this.ts.users == orig(this.ts.users)
this.ts.next_user_id == orig(this.ts.next_user_id)
size(this.ts.users[])-1 == orig(size(this.ts.users[]))
this.ts.initialised == true
this.ts.users[].getClass().getName() == [transactionsystem.UserInfo]
this.ts.next_user_id has only one value
size(this.ts.users[]) == 1
===========================================================================
transactionsystem.Interface.ADMIN_makeGoldUser(java.lang.Integer):::ENTER
this.ts.initialised == true
this.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo]
this.ts.next_user_id has only one value
uid has only one value
size(this.ts.users[]) == 2
===========================================================================
transactionsystem.Interface.ADMIN_makeGoldUser(java.lang.Integer):::EXIT
this.ts == orig(this.ts)
this.ts.initialised == orig(this.ts.initialised)
this.ts.users == orig(this.ts.users)
this.ts.users[] == orig(this.ts.users[])
this.ts.next_user_id == orig(this.ts.next_user_id)
this.ts.initialised == true
this.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo]
this.ts.next_user_id has only one value
size(this.ts.users[]) == 2
===========================================================================
transactionsystem.Interface.ADMIN_whitelistUser(java.lang.Integer):::ENTER
this.ts.initialised == true
this.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo]
this.ts.next_user_id has only one value
uid has only one value
size(this.ts.users[]) == 3
===========================================================================
transactionsystem.Interface.ADMIN_whitelistUser(java.lang.Integer):::EXIT
this.ts == orig(this.ts)
this.ts.initialised == orig(this.ts.initialised)
this.ts.users == orig(this.ts.users)
this.ts.users[] == orig(this.ts.users[])
this.ts.next_user_id == orig(this.ts.next_user_id)
this.ts.initialised == true
this.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo]
this.ts.next_user_id has only one value
size(this.ts.users[]) == 3
===========================================================================
transactionsystem.Interface.Interface():::EXIT
this.ts.initialised == false
this.ts.users[] == []
this.ts.users[].getClass().getName() == []
this.ts.next_user_id has only one value
===========================================================================
transactionsystem.Interface.USER_depositFromExternal(java.lang.Integer, java.lang.Integer, java.lang.String, double):::ENTER
this.ts.initialised == true
uid != null
sid != null
to_account_number != null
amount one of { 100.0, 500.0, 1000.0 }
size(this.ts.users[]) >= 2
===========================================================================
transactionsystem.Interface.USER_depositFromExternal(java.lang.Integer, java.lang.Integer, java.lang.String, double):::EXIT
this.ts == orig(this.ts)
this.ts.initialised == orig(this.ts.initialised)
this.ts.users == orig(this.ts.users)
this.ts.users[] == orig(this.ts.users[])
this.ts.next_user_id == orig(this.ts.next_user_id)
this.ts.initialised == true
size(this.ts.users[]) >= 2
to_account_number.toString == orig(to_account_number.toString)
===========================================================================
transactionsystem.Interface.USER_login(java.lang.Integer):::ENTER
uid != null
===========================================================================
transactionsystem.Interface.USER_login(java.lang.Integer):::EXIT101
return has only one value
===========================================================================
transactionsystem.Interface.USER_login(java.lang.Integer):::EXIT96
this.ts.initialised == true
size(this.ts.users[]) >= 2
===========================================================================
transactionsystem.Interface.USER_login(java.lang.Integer):::EXIT
this.ts == orig(this.ts)
this.ts.initialised == orig(this.ts.initialised)
this.ts.users == orig(this.ts.users)
this.ts.users[] == orig(this.ts.users[])
this.ts.next_user_id == orig(this.ts.next_user_id)
return != null
===========================================================================
transactionsystem.Interface.USER_logout(java.lang.Integer, java.lang.Integer):::ENTER
this.ts.initialised == true
uid != null
sid != null
size(this.ts.users[]) >= 2
===========================================================================
transactionsystem.Interface.USER_logout(java.lang.Integer, java.lang.Integer):::EXIT
this.ts == orig(this.ts)
this.ts.initialised == orig(this.ts.initialised)
this.ts.users == orig(this.ts.users)
this.ts.users[] == orig(this.ts.users[])
this.ts.next_user_id == orig(this.ts.next_user_id)
this.ts.initialised == true
size(this.ts.users[]) >= 2
===========================================================================
transactionsystem.Interface.USER_payToExternal(java.lang.Integer, java.lang.Integer, java.lang.String, double):::ENTER
this.ts.initialised == true
uid != null
sid has only one value
sid != null
from_account_number != null
size(this.ts.users[]) >= 2
===========================================================================
transactionsystem.Interface.USER_payToExternal(java.lang.Integer, java.lang.Integer, java.lang.String, double):::EXIT159
this.ts has only one value
this.ts.users has only one value
this.ts.users[] contains no nulls and has only one value, of length 2
this.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo]
this.ts.next_user_id has only one value
from_account_number.toString == "11"
return == false
orig(this) has only one value
orig(uid) has only one value
orig(from_account_number) has only one value
orig(amount) == 200.0
size(this.ts.users[]) == 2
===========================================================================
transactionsystem.Interface.USER_payToExternal(java.lang.Integer, java.lang.Integer, java.lang.String, double):::EXIT159;condition="not(return == true)"
===========================================================================
transactionsystem.Interface.USER_payToExternal(java.lang.Integer, java.lang.Integer, java.lang.String, double):::EXIT167
this.ts.initialised == return
return == orig(this.ts.initialised)
return == true
orig(amount) one of { 100.0, 200.0 }
===========================================================================
transactionsystem.Interface.USER_payToExternal(java.lang.Integer, java.lang.Integer, java.lang.String, double):::EXIT167;condition="return == true"
===========================================================================
transactionsystem.Interface.USER_payToExternal(java.lang.Integer, java.lang.Integer, java.lang.String, double):::EXIT170
this.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo]
this.ts.next_user_id has only one value
from_account_number.toString == "11"
return == false
orig(uid) has only one value
orig(amount) one of { 395.0, 1000.0 }
size(this.ts.users[]) == 2
===========================================================================
transactionsystem.Interface.USER_payToExternal(java.lang.Integer, java.lang.Integer, java.lang.String, double):::EXIT170;condition="not(return == true)"
===========================================================================
transactionsystem.Interface.USER_payToExternal(java.lang.Integer, java.lang.Integer, java.lang.String, double):::EXIT
this.ts == orig(this.ts)
this.ts.initialised == orig(this.ts.initialised)
this.ts.users == orig(this.ts.users)
this.ts.users[] == orig(this.ts.users[])
this.ts.next_user_id == orig(this.ts.next_user_id)
(return == false)  ==>  (from_account_number.toString == "11")
(return == false)  ==>  (orig(amount) one of { 200.0, 395.0, 1000.0 })
(return == false)  ==>  (orig(uid) has only one value)
(return == false)  ==>  (size(this.ts.users[]) == 2)
(return == false)  ==>  (this.ts.next_user_id has only one value)
(return == false)  ==>  (this.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo])
(return == true)  ==>  (orig(amount) one of { 100.0, 200.0 })
(return == true)  ==>  (this.ts.initialised == return)
this.ts.initialised == true
size(this.ts.users[]) >= 2
from_account_number.toString == orig(from_account_number.toString)
===========================================================================
transactionsystem.Interface.USER_payToExternal(java.lang.Integer, java.lang.Integer, java.lang.String, double):::EXIT;condition="return == true"
this.ts.initialised == return
return == orig(this.ts.initialised)
return == true
orig(amount) one of { 100.0, 200.0 }
===========================================================================
transactionsystem.Interface.USER_payToExternal(java.lang.Integer, java.lang.Integer, java.lang.String, double):::EXIT;condition="not(return == true)"
this.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo]
this.ts.next_user_id has only one value
from_account_number.toString == "11"
return == false
orig(uid) has only one value
orig(amount) one of { 200.0, 395.0, 1000.0 }
size(this.ts.users[]) == 2
===========================================================================
transactionsystem.Interface.USER_requestAccount(java.lang.Integer, java.lang.Integer):::ENTER
this.ts.initialised == true
uid != null
sid != null
===========================================================================
transactionsystem.Interface.USER_requestAccount(java.lang.Integer, java.lang.Integer):::EXIT
this.ts == orig(this.ts)
this.ts.initialised == orig(this.ts.initialised)
this.ts.users == orig(this.ts.users)
this.ts.users[] == orig(this.ts.users[])
this.ts.next_user_id == orig(this.ts.next_user_id)
this.ts.initialised == true
===========================================================================
transactionsystem.Interface.USER_transferToOtherAccount(java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.Integer, java.lang.String, double):::ENTER
this.ts.initialised == true
sid has only one value
to_uid has only one value
to_account_number.toString == "11"
amount == 100.0
from_account_number.toString > to_account_number.toString
===========================================================================
transactionsystem.Interface.USER_transferToOtherAccount(java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.Integer, java.lang.String, double):::EXIT178
this.ts has only one value
this.ts.users has only one value
this.ts.users[] contains no nulls and has only one value, of length 7
this.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo]
this.ts.next_user_id has only one value
from_account_number.toString == "61"
return == false
orig(this) has only one value
orig(from_uid) has only one value
orig(from_account_number) has only one value
orig(to_account_number) has only one value
size(this.ts.users[]) == 7
===========================================================================
transactionsystem.Interface.USER_transferToOtherAccount(java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.Integer, java.lang.String, double):::EXIT178;condition="not(return == true)"
===========================================================================
transactionsystem.Interface.USER_transferToOtherAccount(java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.Integer, java.lang.String, double):::EXIT187
this.ts.initialised == return
return == orig(this.ts.initialised)
return == true
===========================================================================
transactionsystem.Interface.USER_transferToOtherAccount(java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.Integer, java.lang.String, double):::EXIT187;condition="return == true"
===========================================================================
transactionsystem.Interface.USER_transferToOtherAccount(java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.Integer, java.lang.String, double):::EXIT
this.ts == orig(this.ts)
this.ts.initialised == orig(this.ts.initialised)
this.ts.users == orig(this.ts.users)
this.ts.users[] == orig(this.ts.users[])
this.ts.next_user_id == orig(this.ts.next_user_id)
(return == false)  ==>  (from_account_number.toString == "61")
(return == false)  ==>  (orig(from_account_number) has only one value)
(return == false)  ==>  (orig(from_uid) has only one value)
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (orig(to_account_number) has only one value)
(return == false)  ==>  (size(this.ts.users[]) == 7)
(return == false)  ==>  (this.ts has only one value)
(return == false)  ==>  (this.ts.next_user_id has only one value)
(return == false)  ==>  (this.ts.users has only one value)
(return == false)  ==>  (this.ts.users[] contains no nulls and has only one value, of length 7)
(return == false)  ==>  (this.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo])
(return == true)  ==>  (this.ts.initialised == return)
this.ts.initialised == true
to_account_number.toString == "11"
from_account_number.toString > to_account_number.toString
from_account_number.toString == orig(from_account_number.toString)
to_account_number.toString == orig(to_account_number.toString)
===========================================================================
transactionsystem.Interface.USER_transferToOtherAccount(java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.Integer, java.lang.String, double):::EXIT;condition="return == true"
this.ts.initialised == return
return == orig(this.ts.initialised)
return == true
===========================================================================
transactionsystem.Interface.USER_transferToOtherAccount(java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.Integer, java.lang.String, double):::EXIT;condition="not(return == true)"
this.ts has only one value
this.ts.users has only one value
this.ts.users[] contains no nulls and has only one value, of length 7
this.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo]
this.ts.next_user_id has only one value
from_account_number.toString == "61"
return == false
orig(this) has only one value
orig(from_uid) has only one value
orig(from_account_number) has only one value
orig(to_account_number) has only one value
size(this.ts.users[]) == 7
===========================================================================
transactionsystem.Interface.getTransactionSystem():::ENTER
===========================================================================
transactionsystem.Interface.getTransactionSystem():::EXIT
this.ts == return
this.ts.initialised == return.initialised
this.ts.users == return.users
this.ts.users[] == return.users[]
this.ts.next_user_id == return.next_user_id
return == orig(this.ts)
return.initialised == orig(this.ts.initialised)
return.users == orig(this.ts.users)
return.users[] == orig(this.ts.users[])
return.next_user_id == orig(this.ts.next_user_id)
return != null
return.users != null
return.users[] elements != null
return.users[].getClass().getName() elements == transactionsystem.UserInfo.class
return.next_user_id != null
===========================================================================
transactionsystem.InterfaceTest:::OBJECT
this.tr.ts != null
this.tr.ts.users != null
this.tr.ts.users[] elements != null
this.tr.ts.users[].getClass().getName() elements == transactionsystem.UserInfo.class
this.tr.ts.next_user_id != null
this.account_number_receiver.toString one of { "", "11" }
this.account_number.toString >= this.account_number_receiver.toString
===========================================================================
transactionsystem.InterfaceTest.InterfaceTest():::EXIT
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this.tr == null
this.account_number == null
this.uid == null
===========================================================================
transactionsystem.InterfaceTest.initializedBeforeLoginFail():::ENTER
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this has only one value
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == false
this.tr.ts.users has only one value
this.tr.ts.users[] == []
this.tr.ts.users[].getClass().getName() == []
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid == null
this.account_number.toString == this.account_number_receiver.toString
===========================================================================
transactionsystem.InterfaceTest.initializedBeforeLoginFail():::EXIT
this.tr == orig(this.tr)
this.tr.ts == orig(this.tr.ts)
this.tr.ts.initialised == orig(this.tr.ts.initialised)
this.tr.ts.users == orig(this.tr.ts.users)
this.account_number == this.account_number_receiver
this.account_number == orig(this.account_number)
this.account_number == orig(this.account_number_receiver)
this.uid == orig(this.tr.ts.next_user_id)
this.uid_receiver == this.sid
this.uid_receiver == this.sid_receiver
this.uid_receiver == orig(this.uid)
this.uid_receiver == orig(this.uid_receiver)
this.uid_receiver == orig(this.sid)
this.uid_receiver == orig(this.sid_receiver)
size(this.tr.ts.users[])-1 == orig(size(this.tr.ts.users[]))
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == false
this.tr.ts.users has only one value
this.tr.ts.users[] contains no nulls and has only one value, of length 1
this.tr.ts.users[] elements has only one value
this.tr.ts.users[].getClass().getName() == [transactionsystem.UserInfo]
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid has only one value
this.uid_receiver == null
size(this.tr.ts.users[]) == 1
this.account_number.toString == this.account_number_receiver.toString
this.account_number.toString == orig(this.account_number.toString)
this.account_number.toString == orig(this.account_number_receiver.toString)
===========================================================================
transactionsystem.InterfaceTest.initializedBeforeLoginPass():::ENTER
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this has only one value
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == false
this.tr.ts.users has only one value
this.tr.ts.users[] == []
this.tr.ts.users[].getClass().getName() == []
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid == null
this.account_number.toString == this.account_number_receiver.toString
===========================================================================
transactionsystem.InterfaceTest.initializedBeforeLoginPass():::EXIT
this.tr == orig(this.tr)
this.tr.ts == orig(this.tr.ts)
this.tr.ts.users == orig(this.tr.ts.users)
this.account_number == this.account_number_receiver
this.account_number == orig(this.account_number)
this.account_number == orig(this.account_number_receiver)
this.uid == orig(this.tr.ts.next_user_id)
this.uid_receiver == this.sid
this.uid_receiver == this.sid_receiver
this.uid_receiver == orig(this.uid)
this.uid_receiver == orig(this.uid_receiver)
this.uid_receiver == orig(this.sid)
this.uid_receiver == orig(this.sid_receiver)
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == true
this.tr.ts.users has only one value
this.tr.ts.users[] contains no nulls and has only one value, of length 2
this.tr.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo]
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid has only one value
this.uid_receiver == null
size(this.tr.ts.users[]) == 2
this.account_number.toString == this.account_number_receiver.toString
this.account_number.toString == orig(this.account_number.toString)
this.account_number.toString == orig(this.account_number_receiver.toString)
===========================================================================
transactionsystem.InterfaceTest.makeGoldUserTestFail():::ENTER
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this has only one value
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == false
this.tr.ts.users has only one value
this.tr.ts.users[] == []
this.tr.ts.users[].getClass().getName() == []
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid == null
this.account_number.toString == this.account_number_receiver.toString
===========================================================================
transactionsystem.InterfaceTest.makeGoldUserTestFail():::EXIT
this.tr == orig(this.tr)
this.tr.ts == orig(this.tr.ts)
this.tr.ts.users == orig(this.tr.ts.users)
this.account_number == this.account_number_receiver
this.account_number == orig(this.account_number)
this.account_number == orig(this.account_number_receiver)
this.uid == orig(this.tr.ts.next_user_id)
this.uid_receiver == this.sid
this.uid_receiver == this.sid_receiver
this.uid_receiver == orig(this.uid)
this.uid_receiver == orig(this.uid_receiver)
this.uid_receiver == orig(this.sid)
this.uid_receiver == orig(this.sid_receiver)
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == true
this.tr.ts.users has only one value
this.tr.ts.users[] contains no nulls and has only one value, of length 2
this.tr.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo]
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid has only one value
this.uid_receiver == null
size(this.tr.ts.users[]) == 2
this.account_number.toString == this.account_number_receiver.toString
this.account_number.toString == orig(this.account_number.toString)
this.account_number.toString == orig(this.account_number_receiver.toString)
===========================================================================
transactionsystem.InterfaceTest.makeGoldUserTestPass():::ENTER
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this has only one value
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == false
this.tr.ts.users has only one value
this.tr.ts.users[] == []
this.tr.ts.users[].getClass().getName() == []
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid == null
this.account_number.toString == this.account_number_receiver.toString
===========================================================================
transactionsystem.InterfaceTest.makeGoldUserTestPass():::EXIT
this.tr == orig(this.tr)
this.tr.ts == orig(this.tr.ts)
this.tr.ts.users == orig(this.tr.ts.users)
this.account_number == this.account_number_receiver
this.account_number == orig(this.account_number)
this.account_number == orig(this.account_number_receiver)
this.uid == orig(this.tr.ts.next_user_id)
this.uid_receiver == this.sid
this.uid_receiver == this.sid_receiver
this.uid_receiver == orig(this.uid)
this.uid_receiver == orig(this.uid_receiver)
this.uid_receiver == orig(this.sid)
this.uid_receiver == orig(this.sid_receiver)
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == true
this.tr.ts.users has only one value
this.tr.ts.users[] contains no nulls and has only one value, of length 2
this.tr.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo]
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid has only one value
this.uid_receiver == null
size(this.tr.ts.users[]) == 2
this.account_number.toString == this.account_number_receiver.toString
this.account_number.toString == orig(this.account_number.toString)
this.account_number.toString == orig(this.account_number_receiver.toString)
===========================================================================
transactionsystem.InterfaceTest.noMoreThanTenAccountsPerSessionFail():::ENTER
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this has only one value
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == false
this.tr.ts.users has only one value
this.tr.ts.users[] == []
this.tr.ts.users[].getClass().getName() == []
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid == null
===========================================================================
transactionsystem.InterfaceTest.noMoreThanTenAccountsPerSessionFail():::EXIT
this.tr == orig(this.tr)
this.tr.ts == orig(this.tr.ts)
this.tr.ts.users == orig(this.tr.ts.users)
this.account_number_receiver == orig(this.account_number)
this.account_number_receiver == orig(this.account_number_receiver)
this.uid == orig(this.tr.ts.next_user_id)
this.uid_receiver == this.sid_receiver
this.uid_receiver == orig(this.uid)
this.uid_receiver == orig(this.uid_receiver)
this.uid_receiver == orig(this.sid)
this.uid_receiver == orig(this.sid_receiver)
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == true
this.tr.ts.users has only one value
this.tr.ts.users[] contains no nulls and has only one value, of length 2
this.tr.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo]
this.tr.ts.next_user_id has only one value
this.account_number == null
this.account_number_receiver has only one value
this.account_number_receiver.toString == ""
this.uid has only one value
this.uid_receiver == null
this.sid has only one value
size(this.tr.ts.users[]) == 2
===========================================================================
transactionsystem.InterfaceTest.noMoreThanTenAccountsPerSessionPass():::ENTER
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this has only one value
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == false
this.tr.ts.users has only one value
this.tr.ts.users[] == []
this.tr.ts.users[].getClass().getName() == []
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid == null
this.account_number.toString == this.account_number_receiver.toString
===========================================================================
transactionsystem.InterfaceTest.noMoreThanTenAccountsPerSessionPass():::EXIT
this.tr == orig(this.tr)
this.tr.ts == orig(this.tr.ts)
this.tr.ts.users == orig(this.tr.ts.users)
this.account_number_receiver == orig(this.account_number)
this.account_number_receiver == orig(this.account_number_receiver)
this.uid == this.sid
this.uid == orig(this.tr.ts.next_user_id)
this.uid_receiver == this.sid_receiver
this.uid_receiver == orig(this.uid)
this.uid_receiver == orig(this.uid_receiver)
this.uid_receiver == orig(this.sid)
this.uid_receiver == orig(this.sid_receiver)
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == true
this.tr.ts.users has only one value
this.tr.ts.users[] contains no nulls and has only one value, of length 2
this.tr.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo]
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == "110"
this.account_number_receiver has only one value
this.account_number_receiver.toString == ""
this.uid has only one value
this.uid_receiver == null
size(this.tr.ts.users[]) == 2
this.account_number_receiver.toString == orig(this.account_number.toString)
this.account_number_receiver.toString == orig(this.account_number_receiver.toString)
===========================================================================
transactionsystem.InterfaceTest.noMoreThanThreeActiveSessionsAtOnceFail():::ENTER
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this has only one value
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == false
this.tr.ts.users has only one value
this.tr.ts.users[] == []
this.tr.ts.users[].getClass().getName() == []
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid == null
this.account_number.toString == this.account_number_receiver.toString
===========================================================================
transactionsystem.InterfaceTest.noMoreThanThreeActiveSessionsAtOnceFail():::EXIT
this.tr == orig(this.tr)
this.tr.ts == orig(this.tr.ts)
this.tr.ts.users == orig(this.tr.ts.users)
this.account_number == this.account_number_receiver
this.account_number == orig(this.account_number)
this.account_number == orig(this.account_number_receiver)
this.uid_receiver == this.sid_receiver
this.uid_receiver == orig(this.uid)
this.uid_receiver == orig(this.uid_receiver)
this.uid_receiver == orig(this.sid)
this.uid_receiver == orig(this.sid_receiver)
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == true
this.tr.ts.users has only one value
this.tr.ts.users[] contains no nulls and has only one value, of length 5
this.tr.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo]
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid has only one value
this.uid_receiver == null
this.sid has only one value
size(this.tr.ts.users[]) == 5
this.account_number.toString == this.account_number_receiver.toString
this.account_number.toString == orig(this.account_number.toString)
this.account_number.toString == orig(this.account_number_receiver.toString)
===========================================================================
transactionsystem.InterfaceTest.noMoreThanThreeActiveSessionsAtOncePass():::ENTER
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this has only one value
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == false
this.tr.ts.users has only one value
this.tr.ts.users[] == []
this.tr.ts.users[].getClass().getName() == []
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid == null
this.account_number.toString == this.account_number_receiver.toString
===========================================================================
transactionsystem.InterfaceTest.noMoreThanThreeActiveSessionsAtOncePass():::EXIT
this.tr == orig(this.tr)
this.tr.ts == orig(this.tr.ts)
this.tr.ts.users == orig(this.tr.ts.users)
this.account_number == this.account_number_receiver
this.account_number == orig(this.account_number)
this.account_number == orig(this.account_number_receiver)
this.uid_receiver == this.sid_receiver
this.uid_receiver == orig(this.uid)
this.uid_receiver == orig(this.uid_receiver)
this.uid_receiver == orig(this.sid)
this.uid_receiver == orig(this.sid_receiver)
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == true
this.tr.ts.users has only one value
this.tr.ts.users[] contains no nulls and has only one value, of length 5
this.tr.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo]
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid has only one value
this.uid_receiver == null
this.sid has only one value
size(this.tr.ts.users[]) == 5
this.account_number.toString == this.account_number_receiver.toString
this.account_number.toString == orig(this.account_number.toString)
this.account_number.toString == orig(this.account_number_receiver.toString)
===========================================================================
transactionsystem.InterfaceTest.noNegativeBalanceFail():::ENTER
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this has only one value
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == false
this.tr.ts.users has only one value
this.tr.ts.users[] == []
this.tr.ts.users[].getClass().getName() == []
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid == null
this.account_number.toString == this.account_number_receiver.toString
===========================================================================
transactionsystem.InterfaceTest.noNegativeBalanceFail():::EXIT
this.tr == orig(this.tr)
this.tr.ts == orig(this.tr.ts)
this.tr.ts.users == orig(this.tr.ts.users)
this.account_number_receiver == orig(this.account_number)
this.account_number_receiver == orig(this.account_number_receiver)
this.uid == orig(this.tr.ts.next_user_id)
this.uid_receiver == this.sid_receiver
this.uid_receiver == orig(this.uid)
this.uid_receiver == orig(this.uid_receiver)
this.uid_receiver == orig(this.sid)
this.uid_receiver == orig(this.sid_receiver)
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == true
this.tr.ts.users has only one value
this.tr.ts.users[] contains no nulls and has only one value, of length 2
this.tr.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo]
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == "11"
this.account_number_receiver has only one value
this.account_number_receiver.toString == ""
this.uid has only one value
this.uid_receiver == null
this.sid has only one value
size(this.tr.ts.users[]) == 2
this.account_number_receiver.toString == orig(this.account_number.toString)
this.account_number_receiver.toString == orig(this.account_number_receiver.toString)
===========================================================================
transactionsystem.InterfaceTest.noNegativeBalancePass():::ENTER
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this has only one value
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == false
this.tr.ts.users has only one value
this.tr.ts.users[] == []
this.tr.ts.users[].getClass().getName() == []
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid == null
this.account_number.toString == this.account_number_receiver.toString
===========================================================================
transactionsystem.InterfaceTest.noNegativeBalancePass():::EXIT
this.tr == orig(this.tr)
this.tr.ts == orig(this.tr.ts)
this.tr.ts.users == orig(this.tr.ts.users)
this.account_number_receiver == orig(this.account_number)
this.account_number_receiver == orig(this.account_number_receiver)
this.uid == orig(this.tr.ts.next_user_id)
this.uid_receiver == this.sid_receiver
this.uid_receiver == orig(this.uid)
this.uid_receiver == orig(this.uid_receiver)
this.uid_receiver == orig(this.sid)
this.uid_receiver == orig(this.sid_receiver)
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == true
this.tr.ts.users has only one value
this.tr.ts.users[] contains no nulls and has only one value, of length 2
this.tr.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo]
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == "11"
this.account_number_receiver has only one value
this.account_number_receiver.toString == ""
this.uid has only one value
this.uid_receiver == null
this.sid has only one value
size(this.tr.ts.users[]) == 2
this.account_number_receiver.toString == orig(this.account_number.toString)
this.account_number_receiver.toString == orig(this.account_number_receiver.toString)
===========================================================================
transactionsystem.InterfaceTest.noWhitelistBeforeThreeTransfersFail():::ENTER
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this has only one value
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == false
this.tr.ts.users has only one value
this.tr.ts.users[] == []
this.tr.ts.users[].getClass().getName() == []
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid == null
this.account_number.toString == this.account_number_receiver.toString
===========================================================================
transactionsystem.InterfaceTest.noWhitelistBeforeThreeTransfersFail():::EXIT
this.tr == orig(this.tr)
this.tr.ts == orig(this.tr.ts)
this.tr.ts.users == orig(this.tr.ts.users)
this.uid_receiver == this.sid
this.uid_receiver == orig(this.tr.ts.next_user_id)
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == true
this.tr.ts.users has only one value
this.tr.ts.users[] contains no nulls and has only one value, of length 3
this.tr.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo]
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == "21"
this.account_number_receiver has only one value
this.account_number_receiver.toString == "11"
this.uid has only one value
this.uid_receiver has only one value
this.sid_receiver has only one value
size(this.tr.ts.users[]) == 3
===========================================================================
transactionsystem.InterfaceTest.noWhitelistBeforeThreeTransfersPass():::ENTER
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this has only one value
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == false
this.tr.ts.users has only one value
this.tr.ts.users[] == []
this.tr.ts.users[].getClass().getName() == []
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid == null
this.account_number.toString == this.account_number_receiver.toString
===========================================================================
transactionsystem.InterfaceTest.noWhitelistBeforeThreeTransfersPass():::EXIT
this.tr == orig(this.tr)
this.tr.ts == orig(this.tr.ts)
this.tr.ts.users == orig(this.tr.ts.users)
this.uid == this.sid
this.uid_receiver == orig(this.tr.ts.next_user_id)
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == true
this.tr.ts.users has only one value
this.tr.ts.users[] contains no nulls and has only one value, of length 3
this.tr.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo]
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == "21"
this.account_number_receiver has only one value
this.account_number_receiver.toString == "11"
this.uid has only one value
this.uid_receiver has only one value
this.sid_receiver has only one value
size(this.tr.ts.users[]) == 3
===========================================================================
transactionsystem.InterfaceTest.noWithdrawAfterUserDisabledFail():::ENTER
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this has only one value
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == false
this.tr.ts.users has only one value
this.tr.ts.users[] == []
this.tr.ts.users[].getClass().getName() == []
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid == null
this.account_number.toString == this.account_number_receiver.toString
===========================================================================
transactionsystem.InterfaceTest.noWithdrawAfterUserDisabledFail():::EXIT
this.tr == orig(this.tr)
this.tr.ts == orig(this.tr.ts)
this.tr.ts.users == orig(this.tr.ts.users)
this.account_number_receiver == orig(this.account_number)
this.account_number_receiver == orig(this.account_number_receiver)
this.uid == orig(this.tr.ts.next_user_id)
this.uid_receiver == this.sid_receiver
this.uid_receiver == orig(this.uid)
this.uid_receiver == orig(this.uid_receiver)
this.uid_receiver == orig(this.sid)
this.uid_receiver == orig(this.sid_receiver)
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == true
this.tr.ts.users has only one value
this.tr.ts.users[] contains no nulls and has only one value, of length 2
this.tr.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo]
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == "11"
this.account_number_receiver has only one value
this.account_number_receiver.toString == ""
this.uid has only one value
this.uid_receiver == null
this.sid has only one value
size(this.tr.ts.users[]) == 2
this.account_number_receiver.toString == orig(this.account_number.toString)
this.account_number_receiver.toString == orig(this.account_number_receiver.toString)
===========================================================================
transactionsystem.InterfaceTest.noWithdrawAfterUserDisabledPass():::ENTER
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this has only one value
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == false
this.tr.ts.users has only one value
this.tr.ts.users[] == []
this.tr.ts.users[].getClass().getName() == []
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid == null
this.account_number.toString == this.account_number_receiver.toString
===========================================================================
transactionsystem.InterfaceTest.noWithdrawAfterUserDisabledPass():::EXIT
this.tr == orig(this.tr)
this.tr.ts == orig(this.tr.ts)
this.tr.ts.users == orig(this.tr.ts.users)
this.account_number_receiver == orig(this.account_number)
this.account_number_receiver == orig(this.account_number_receiver)
this.uid == orig(this.tr.ts.next_user_id)
this.uid_receiver == this.sid_receiver
this.uid_receiver == orig(this.uid)
this.uid_receiver == orig(this.uid_receiver)
this.uid_receiver == orig(this.sid)
this.uid_receiver == orig(this.sid_receiver)
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == true
this.tr.ts.users has only one value
this.tr.ts.users[] contains no nulls and has only one value, of length 2
this.tr.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo]
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == "11"
this.account_number_receiver has only one value
this.account_number_receiver.toString == ""
this.uid has only one value
this.uid_receiver == null
this.sid has only one value
size(this.tr.ts.users[]) == 2
this.account_number_receiver.toString == orig(this.account_number.toString)
this.account_number_receiver.toString == orig(this.account_number_receiver.toString)
===========================================================================
transactionsystem.InterfaceTest.setUp():::ENTER
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this.tr == null
this.account_number == null
this.uid == null
===========================================================================
transactionsystem.InterfaceTest.setUp():::EXIT
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this.uid == orig(this.uid)
this.uid == orig(this.uid_receiver)
this.uid == orig(this.sid)
this.uid == orig(this.sid_receiver)
this.tr != null
this.tr.ts.initialised == false
this.tr.ts.users[] == []
this.tr.ts.users[].getClass().getName() == []
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number != null
this.account_number.toString == ""
this.uid == null
this.account_number.toString == this.account_number_receiver.toString
===========================================================================
transactionsystem.InterfaceTest.transfersCanOnlyBeDoneDuringActiveSessionsFail():::ENTER
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this has only one value
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == false
this.tr.ts.users has only one value
this.tr.ts.users[] == []
this.tr.ts.users[].getClass().getName() == []
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid == null
this.account_number.toString == this.account_number_receiver.toString
===========================================================================
transactionsystem.InterfaceTest.transfersCanOnlyBeDoneDuringActiveSessionsFail():::EXIT
this.tr == orig(this.tr)
this.tr.ts == orig(this.tr.ts)
this.tr.ts.users == orig(this.tr.ts.users)
this.uid_receiver == orig(this.tr.ts.next_user_id)
this.sid == this.sid_receiver
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == true
this.tr.ts.users has only one value
this.tr.ts.users[] contains no nulls and has only one value, of length 7
this.tr.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo]
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == "61"
this.account_number_receiver has only one value
this.account_number_receiver.toString == "11"
this.uid has only one value
this.uid_receiver has only one value
this.sid has only one value
size(this.tr.ts.users[]) == 7
===========================================================================
transactionsystem.InterfaceTest.transfersCanOnlyBeDoneDuringActiveSessionsPass():::ENTER
this.account_number == this.account_number_receiver
this.uid == this.uid_receiver
this.uid == this.sid
this.uid == this.sid_receiver
this has only one value
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == false
this.tr.ts.users has only one value
this.tr.ts.users[] == []
this.tr.ts.users[].getClass().getName() == []
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == ""
this.uid == null
this.account_number.toString == this.account_number_receiver.toString
===========================================================================
transactionsystem.InterfaceTest.transfersCanOnlyBeDoneDuringActiveSessionsPass():::EXIT
this.tr == orig(this.tr)
this.tr.ts == orig(this.tr.ts)
this.tr.ts.users == orig(this.tr.ts.users)
this.uid_receiver == orig(this.tr.ts.next_user_id)
this.sid == this.sid_receiver
this.tr has only one value
this.tr.ts has only one value
this.tr.ts.initialised == true
this.tr.ts.users has only one value
this.tr.ts.users[] contains no nulls and has only one value, of length 7
this.tr.ts.users[].getClass().getName() == [transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo, transactionsystem.UserInfo]
this.tr.ts.next_user_id has only one value
this.account_number has only one value
this.account_number.toString == "61"
this.account_number_receiver has only one value
this.account_number_receiver.toString == "11"
this.uid has only one value
this.uid_receiver has only one value
this.sid has only one value
size(this.tr.ts.users[]) == 7
===========================================================================
transactionsystem.TransactionSystem:::OBJECT
this.users != null
this.users[] elements != null
this.users[].getClass().getName() elements == transactionsystem.UserInfo.class
this.next_user_id != null
===========================================================================
transactionsystem.TransactionSystem.TransactionSystem():::EXIT
this.initialised == false
this.users[] == []
this.users[].getClass().getName() == []
this.next_user_id has only one value
===========================================================================
transactionsystem.TransactionSystem.addUser(java.lang.String, java.lang.String):::ENTER
name != null
country != null
name.toString != country.toString
===========================================================================
transactionsystem.TransactionSystem.addUser(java.lang.String, java.lang.String):::EXIT
this.initialised == orig(this.initialised)
this.users == orig(this.users)
return == orig(this.next_user_id)
size(this.users[])-1 == orig(size(this.users[]))
return != null
name.toString != country.toString
name.toString == orig(name.toString)
country.toString == orig(country.toString)
===========================================================================
transactionsystem.TransactionSystem.charges(java.lang.Integer, double):::ENTER
this.initialised == true
uid != null
size(this.users[]) >= 2
===========================================================================
transactionsystem.TransactionSystem.charges(java.lang.Integer, double):::EXIT74
===========================================================================
transactionsystem.TransactionSystem.charges(java.lang.Integer, double):::EXIT
this.initialised == orig(this.initialised)
this.users == orig(this.users)
this.users[] == orig(this.users[])
this.next_user_id == orig(this.next_user_id)
this.initialised == true
size(this.users[]) >= 2
orig(amount) % return == 0
===========================================================================
transactionsystem.TransactionSystem.getUserInfo(java.lang.Integer):::ENTER
uid != null
===========================================================================
transactionsystem.TransactionSystem.getUserInfo(java.lang.Integer):::EXIT44
===========================================================================
transactionsystem.TransactionSystem.getUserInfo(java.lang.Integer):::EXIT
this.initialised == orig(this.initialised)
this.users == orig(this.users)
this.users[] == orig(this.users[])
this.next_user_id == orig(this.next_user_id)
return.uid == orig(uid)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == size(transactionsystem.UserInfo$UserStatus.$VALUES[])
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == size(transactionsystem.UserInfo$UserType.$VALUES[])
return != null
return.uid != null
return.name != null
return.mode != null
transactionsystem.UserInfo$UserMode.ACTIVE has only one value
transactionsystem.UserInfo$UserMode.ACTIVE != null
transactionsystem.UserInfo$UserMode.DISABLED has only one value
transactionsystem.UserInfo$UserMode.DISABLED != null
transactionsystem.UserInfo$UserMode.FROZEN has only one value
transactionsystem.UserInfo$UserMode.FROZEN != null
transactionsystem.UserInfo$UserMode.$VALUES has only one value
transactionsystem.UserInfo$UserMode.$VALUES != null
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == transactionsystem.UserInfo$UserMode[].class
transactionsystem.UserInfo$UserMode.$VALUES[] contains no nulls and has only one value, of length 3
transactionsystem.UserInfo$UserMode.$VALUES[] elements != null
transactionsystem.UserInfo$UserMode.$VALUES[].getClass().getName() == [transactionsystem.UserInfo.UserMode, transactionsystem.UserInfo.UserMode, transactionsystem.UserInfo.UserMode]
transactionsystem.UserInfo$UserMode.$VALUES[].getClass().getName() elements == transactionsystem.UserInfo.UserMode.class
return.status != null
transactionsystem.UserInfo$UserStatus.WHITELISTED has only one value
transactionsystem.UserInfo$UserStatus.WHITELISTED != null
transactionsystem.UserInfo$UserStatus.GREYLISTED has only one value
transactionsystem.UserInfo$UserStatus.GREYLISTED != null
transactionsystem.UserInfo$UserStatus.BLACKLISTED has only one value
transactionsystem.UserInfo$UserStatus.BLACKLISTED != null
transactionsystem.UserInfo$UserStatus.$VALUES has only one value
transactionsystem.UserInfo$UserStatus.$VALUES != null
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == transactionsystem.UserInfo$UserStatus[].class
transactionsystem.UserInfo$UserStatus.$VALUES[] contains no nulls and has only one value, of length 3
transactionsystem.UserInfo$UserStatus.$VALUES[] elements != null
transactionsystem.UserInfo$UserStatus.$VALUES[].getClass().getName() == [transactionsystem.UserInfo.UserStatus, transactionsystem.UserInfo.UserStatus, transactionsystem.UserInfo.UserStatus]
transactionsystem.UserInfo$UserStatus.$VALUES[].getClass().getName() elements == transactionsystem.UserInfo.UserStatus.class
return.type != null
transactionsystem.UserInfo$UserType.GOLD has only one value
transactionsystem.UserInfo$UserType.GOLD != null
transactionsystem.UserInfo$UserType.SILVER has only one value
transactionsystem.UserInfo$UserType.SILVER != null
transactionsystem.UserInfo$UserType.NORMAL has only one value
transactionsystem.UserInfo$UserType.NORMAL != null
transactionsystem.UserInfo$UserType.$VALUES has only one value
transactionsystem.UserInfo$UserType.$VALUES != null
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == transactionsystem.UserInfo$UserType[].class
transactionsystem.UserInfo$UserType.$VALUES[] contains no nulls and has only one value, of length 3
transactionsystem.UserInfo$UserType.$VALUES[] elements != null
transactionsystem.UserInfo$UserType.$VALUES[].getClass().getName() == [transactionsystem.UserInfo.UserType, transactionsystem.UserInfo.UserType, transactionsystem.UserInfo.UserType]
transactionsystem.UserInfo$UserType.$VALUES[].getClass().getName() elements == transactionsystem.UserInfo.UserType.class
return.sessions != null
return.sessions[] elements != null
return.sessions[].getClass().getName() elements == transactionsystem.UserSession.class
return.accounts != null
return.accounts[] elements != null
return.accounts[].getClass().getName() elements == transactionsystem.UserAccount.class
return.next_session_id != null
return.next_account != null
return.country != null
return.numOfTransactionsWhenGreyListed != null
return.accountRequestsPerSession != null
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == 3
return in this.users[]
return.name.toString != return.country.toString
return.mode in transactionsystem.UserInfo$UserMode.$VALUES[]
transactionsystem.UserInfo$UserMode.ACTIVE in transactionsystem.UserInfo$UserMode.$VALUES[]
transactionsystem.UserInfo$UserMode.DISABLED in transactionsystem.UserInfo$UserMode.$VALUES[]
transactionsystem.UserInfo$UserMode.FROZEN in transactionsystem.UserInfo$UserMode.$VALUES[]
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() != transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName()
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() != transactionsystem.UserInfo$UserType.$VALUES.getClass().getName()
return.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
transactionsystem.UserInfo$UserStatus.WHITELISTED in transactionsystem.UserInfo$UserStatus.$VALUES[]
transactionsystem.UserInfo$UserStatus.GREYLISTED in transactionsystem.UserInfo$UserStatus.$VALUES[]
transactionsystem.UserInfo$UserStatus.BLACKLISTED in transactionsystem.UserInfo$UserStatus.$VALUES[]
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() != transactionsystem.UserInfo$UserType.$VALUES.getClass().getName()
return.type in transactionsystem.UserInfo$UserType.$VALUES[]
transactionsystem.UserInfo$UserType.GOLD in transactionsystem.UserInfo$UserType.$VALUES[]
transactionsystem.UserInfo$UserType.SILVER in transactionsystem.UserInfo$UserType.$VALUES[]
transactionsystem.UserInfo$UserType.NORMAL in transactionsystem.UserInfo$UserType.$VALUES[]
===========================================================================
transactionsystem.TransactionSystem.initialise():::ENTER
this.initialised == false
this.users[] == []
this.users[].getClass().getName() == []
this.next_user_id has only one value
===========================================================================
transactionsystem.TransactionSystem.initialise():::EXIT
this.users == orig(this.users)
this.next_user_id == orig(this.next_user_id)
size(this.users[])-1 == orig(size(this.users[]))
this.initialised == true
this.users[].getClass().getName() == [transactionsystem.UserInfo]
this.next_user_id has only one value
size(this.users[]) == 1
===========================================================================
transactionsystem.UserAccount:::OBJECT
this.account_number != null
this.balance >= 0.0
this.owner != null
===========================================================================
transactionsystem.UserAccount.UserAccount(java.lang.Integer, java.lang.String):::ENTER
uid != null
anumber != null
===========================================================================
transactionsystem.UserAccount.UserAccount(java.lang.Integer, java.lang.String):::EXIT
this.account_number == orig(anumber)
this.owner == orig(uid)
this.opened == false
this.balance == 0.0
this.account_number.toString == anumber.toString
anumber.toString == orig(anumber.toString)
===========================================================================
transactionsystem.UserAccount.activateAccount():::ENTER
this.opened == false
this.balance == 0.0
===========================================================================
transactionsystem.UserAccount.activateAccount():::EXIT
this.account_number == orig(this.account_number)
this.balance == orig(this.balance)
this.owner == orig(this.owner)
this.opened == true
this.balance == 0.0
this.account_number.toString == orig(this.account_number.toString)
===========================================================================
transactionsystem.UserAccount.deposit(double):::ENTER
this.opened == true
amount one of { 100.0, 500.0, 1000.0 }
===========================================================================
transactionsystem.UserAccount.deposit(double):::EXIT
this.opened == orig(this.opened)
this.account_number == orig(this.account_number)
this.owner == orig(this.owner)
this.opened == true
this.account_number.toString == orig(this.account_number.toString)
this.balance > orig(this.balance)
this.balance >= orig(amount)
this.balance - orig(this.balance) - orig(amount) == 0
===========================================================================
transactionsystem.UserAccount.getAccountNumber():::ENTER
===========================================================================
transactionsystem.UserAccount.getAccountNumber():::EXIT
this.opened == orig(this.opened)
this.account_number == return
this.balance == orig(this.balance)
this.owner == orig(this.owner)
return == orig(this.account_number)
return != null
this.account_number.toString == return.toString
return.toString == orig(this.account_number.toString)
===========================================================================
transactionsystem.UserAccount.getBalance():::ENTER
this.opened == true
===========================================================================
transactionsystem.UserAccount.getBalance():::EXIT
this.opened == orig(this.opened)
this.account_number == orig(this.account_number)
this.balance == return
this.owner == orig(this.owner)
return == orig(this.balance)
this.opened == true
this.account_number.toString == orig(this.account_number.toString)
===========================================================================
transactionsystem.UserAccount.withdraw(double):::ENTER
this.opened == true
amount one of { 105.0, 210.0 }
this.balance > amount
===========================================================================
transactionsystem.UserAccount.withdraw(double):::EXIT
this.opened == orig(this.opened)
this.account_number == orig(this.account_number)
this.owner == orig(this.owner)
this.opened == true
this.account_number.toString == orig(this.account_number.toString)
this.balance < orig(this.balance)
this.balance > orig(amount)
this.balance - orig(this.balance) + orig(amount) == 0
===========================================================================
transactionsystem.UserInfo$UserMode:::OBJECT
===========================================================================
transactionsystem.UserInfo$UserMode.UserInfo$UserMode(java.lang.String, int):::ENTER
$hidden$1.toString one of { "ACTIVE", "DISABLED", "FROZEN" }
$hidden$2 one of { 0, 1, 2 }
===========================================================================
transactionsystem.UserInfo$UserMode.UserInfo$UserMode(java.lang.String, int):::EXIT
$hidden$1.toString one of { "ACTIVE", "DISABLED", "FROZEN" }
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
transactionsystem.UserInfo$UserStatus:::OBJECT
===========================================================================
transactionsystem.UserInfo$UserStatus.UserInfo$UserStatus(java.lang.String, int):::ENTER
$hidden$1.toString one of { "BLACKLISTED", "GREYLISTED", "WHITELISTED" }
$hidden$2 one of { 0, 1, 2 }
===========================================================================
transactionsystem.UserInfo$UserStatus.UserInfo$UserStatus(java.lang.String, int):::EXIT
$hidden$1.toString one of { "BLACKLISTED", "GREYLISTED", "WHITELISTED" }
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
transactionsystem.UserInfo$UserType:::OBJECT
===========================================================================
transactionsystem.UserInfo$UserType.UserInfo$UserType(java.lang.String, int):::ENTER
$hidden$1.toString one of { "GOLD", "NORMAL", "SILVER" }
$hidden$2 one of { 0, 1, 2 }
===========================================================================
transactionsystem.UserInfo$UserType.UserInfo$UserType(java.lang.String, int):::EXIT
$hidden$1.toString one of { "GOLD", "NORMAL", "SILVER" }
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
transactionsystem.UserInfo:::OBJECT
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == size(transactionsystem.UserInfo$UserStatus.$VALUES[])
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == size(transactionsystem.UserInfo$UserType.$VALUES[])
size(transactionsystem.UserInfo$UserStatus.$VALUES[]) == size(transactionsystem.UserInfo$UserType.$VALUES[])
this.uid != null
this.name != null
transactionsystem.UserInfo$UserMode.ACTIVE has only one value
transactionsystem.UserInfo$UserMode.ACTIVE != null
transactionsystem.UserInfo$UserMode.DISABLED has only one value
transactionsystem.UserInfo$UserMode.DISABLED != null
transactionsystem.UserInfo$UserMode.FROZEN has only one value
transactionsystem.UserInfo$UserMode.FROZEN != null
transactionsystem.UserInfo$UserMode.$VALUES has only one value
transactionsystem.UserInfo$UserMode.$VALUES != null
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == transactionsystem.UserInfo$UserMode[].class
transactionsystem.UserInfo$UserMode.$VALUES[] contains no nulls and has only one value, of length 3
transactionsystem.UserInfo$UserMode.$VALUES[] elements != null
transactionsystem.UserInfo$UserMode.$VALUES[].getClass().getName() == [transactionsystem.UserInfo.UserMode, transactionsystem.UserInfo.UserMode, transactionsystem.UserInfo.UserMode]
transactionsystem.UserInfo$UserMode.$VALUES[].getClass().getName() elements == transactionsystem.UserInfo.UserMode.class
transactionsystem.UserInfo$UserStatus.WHITELISTED has only one value
transactionsystem.UserInfo$UserStatus.WHITELISTED != null
transactionsystem.UserInfo$UserStatus.GREYLISTED has only one value
transactionsystem.UserInfo$UserStatus.GREYLISTED != null
transactionsystem.UserInfo$UserStatus.BLACKLISTED has only one value
transactionsystem.UserInfo$UserStatus.BLACKLISTED != null
transactionsystem.UserInfo$UserStatus.$VALUES has only one value
transactionsystem.UserInfo$UserStatus.$VALUES != null
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == transactionsystem.UserInfo$UserStatus[].class
transactionsystem.UserInfo$UserStatus.$VALUES[] contains no nulls and has only one value, of length 3
transactionsystem.UserInfo$UserStatus.$VALUES[] elements != null
transactionsystem.UserInfo$UserStatus.$VALUES[].getClass().getName() == [transactionsystem.UserInfo.UserStatus, transactionsystem.UserInfo.UserStatus, transactionsystem.UserInfo.UserStatus]
transactionsystem.UserInfo$UserStatus.$VALUES[].getClass().getName() elements == transactionsystem.UserInfo.UserStatus.class
transactionsystem.UserInfo$UserType.GOLD has only one value
transactionsystem.UserInfo$UserType.GOLD != null
transactionsystem.UserInfo$UserType.SILVER has only one value
transactionsystem.UserInfo$UserType.SILVER != null
transactionsystem.UserInfo$UserType.NORMAL has only one value
transactionsystem.UserInfo$UserType.NORMAL != null
transactionsystem.UserInfo$UserType.$VALUES has only one value
transactionsystem.UserInfo$UserType.$VALUES != null
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == transactionsystem.UserInfo$UserType[].class
transactionsystem.UserInfo$UserType.$VALUES[] contains no nulls and has only one value, of length 3
transactionsystem.UserInfo$UserType.$VALUES[] elements != null
transactionsystem.UserInfo$UserType.$VALUES[].getClass().getName() == [transactionsystem.UserInfo.UserType, transactionsystem.UserInfo.UserType, transactionsystem.UserInfo.UserType]
transactionsystem.UserInfo$UserType.$VALUES[].getClass().getName() elements == transactionsystem.UserInfo.UserType.class
this.sessions[] elements != null
this.sessions[].getClass().getName() elements == transactionsystem.UserSession.class
this.accounts[] elements != null
this.accounts[].getClass().getName() elements == transactionsystem.UserAccount.class
this.accountRequestsPerSession != null
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == 3
size(transactionsystem.UserInfo$UserStatus.$VALUES[]) == 3
size(transactionsystem.UserInfo$UserType.$VALUES[]) == 3
this.name.toString != this.country.toString
transactionsystem.UserInfo$UserMode.ACTIVE in transactionsystem.UserInfo$UserMode.$VALUES[]
transactionsystem.UserInfo$UserMode.DISABLED in transactionsystem.UserInfo$UserMode.$VALUES[]
transactionsystem.UserInfo$UserMode.FROZEN in transactionsystem.UserInfo$UserMode.$VALUES[]
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() != transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName()
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() != transactionsystem.UserInfo$UserType.$VALUES.getClass().getName()
transactionsystem.UserInfo$UserStatus.WHITELISTED in transactionsystem.UserInfo$UserStatus.$VALUES[]
transactionsystem.UserInfo$UserStatus.GREYLISTED in transactionsystem.UserInfo$UserStatus.$VALUES[]
transactionsystem.UserInfo$UserStatus.BLACKLISTED in transactionsystem.UserInfo$UserStatus.$VALUES[]
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() != transactionsystem.UserInfo$UserType.$VALUES.getClass().getName()
transactionsystem.UserInfo$UserType.GOLD in transactionsystem.UserInfo$UserType.$VALUES[]
transactionsystem.UserInfo$UserType.SILVER in transactionsystem.UserInfo$UserType.$VALUES[]
transactionsystem.UserInfo$UserType.NORMAL in transactionsystem.UserInfo$UserType.$VALUES[]
===========================================================================
transactionsystem.UserInfo.UserInfo(java.lang.Integer, java.lang.String, java.lang.String):::ENTER
uid != null
name != null
country != null
name.toString != country.toString
===========================================================================
transactionsystem.UserInfo.UserInfo(java.lang.Integer, java.lang.String, java.lang.String):::EXIT
this.uid == orig(uid)
this.name == orig(name)
this.mode == transactionsystem.UserInfo$UserMode.DISABLED
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
this.type == transactionsystem.UserInfo$UserType.NORMAL
this.sessions[] == this.accounts[]
this.next_session_id == this.numOfTransactionsWhenGreyListed
this.country == orig(country)
this.sessions != null
this.sessions[] == []
this.sessions[].getClass().getName() == []
this.accounts != null
this.next_session_id has only one value
this.next_session_id != null
this.next_account has only one value
this.next_account != null
this.country != null
this.name.toString == name.toString
this.country.toString == country.toString
name.toString != country.toString
name.toString == orig(name.toString)
country.toString == orig(country.toString)
===========================================================================
transactionsystem.UserInfo.closeSession(java.lang.Integer):::ENTER
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
this.type == transactionsystem.UserInfo$UserType.NORMAL
this.status != null
this.sessions != null
this.accounts != null
this.next_session_id != null
this.next_account != null
this.country != null
this.country.toString one of { "France", "Romania", "Senegal" }
this.numOfTransactionsWhenGreyListed != null
sid != null
size(this.sessions[]) >= 1
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
size(transactionsystem.UserInfo$UserMode.$VALUES[]) != size(this.accounts[])
size(transactionsystem.UserInfo$UserMode.$VALUES[]) != size(this.accounts[])-1
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 != size(this.accounts[])
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 != size(this.accounts[])-1
size(this.sessions[]) != size(this.accounts[])-1
===========================================================================
transactionsystem.UserInfo.closeSession(java.lang.Integer):::EXIT
this.uid == orig(this.uid)
this.name == orig(this.name)
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
transactionsystem.UserInfo$UserMode.ACTIVE == orig(this.mode)
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == transactionsystem.UserInfo$UserType.NORMAL
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(this.type)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.sessions[] == orig(this.sessions[])
this.accounts == orig(this.accounts)
this.accounts[] == orig(this.accounts[])
this.next_session_id == orig(this.next_session_id)
this.next_account == orig(this.next_account)
this.country == orig(this.country)
this.numOfTransactionsWhenGreyListed == orig(this.numOfTransactionsWhenGreyListed)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
this.status != null
this.sessions != null
this.accounts != null
this.next_session_id != null
this.next_account != null
this.country != null
this.country.toString one of { "France", "Romania", "Senegal" }
this.numOfTransactionsWhenGreyListed != null
size(this.sessions[]) >= 1
this.name.toString == orig(this.name.toString)
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
this.country.toString == orig(this.country.toString)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) != size(this.accounts[])
size(transactionsystem.UserInfo$UserMode.$VALUES[]) != size(this.accounts[])-1
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 != size(this.accounts[])
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 != size(this.accounts[])-1
size(this.sessions[]) != size(this.accounts[])-1
===========================================================================
transactionsystem.UserInfo.createAccount(java.lang.Integer):::ENTER
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
this.type == transactionsystem.UserInfo$UserType.NORMAL
this.sessions != null
this.sessions[].getClass().getName() one of { [transactionsystem.UserSession], [transactionsystem.UserSession, transactionsystem.UserSession] }
this.accounts != null
this.next_session_id != null
this.next_account != null
this.country != null
this.country.toString one of { "France", "Romania", "Senegal" }
this.numOfTransactionsWhenGreyListed has only one value
this.numOfTransactionsWhenGreyListed != null
sid != null
size(this.sessions[]) one of { 1, 2 }
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 >= size(this.sessions[])
size(this.sessions[])-1 <= size(this.accounts[])
===========================================================================
transactionsystem.UserInfo.createAccount(java.lang.Integer):::EXIT184
size(this.accounts[])-1 == orig(size(this.accounts[]))
return != null
===========================================================================
transactionsystem.UserInfo.createAccount(java.lang.Integer):::EXIT186
this.uid == this.next_session_id
this.uid == orig(this.next_session_id)
this.accounts[] == orig(this.accounts[])
this.next_account == orig(this.next_account)
this.numOfTransactionsWhenGreyListed == orig(sid)
this.uid has only one value
this.name has only one value
this.name.toString == "Fred"
this.sessions has only one value
this.sessions[] contains no nulls and has only one value, of length 1
this.sessions[] elements has only one value
this.sessions[].getClass().getName() == [transactionsystem.UserSession]
this.accounts has only one value
this.accounts[] contains no nulls and has only one value, of length 10
this.accounts[].getClass().getName() == [transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount]
this.next_account has only one value
this.country has only one value
this.country.toString == "France"
this.accountRequestsPerSession has only one value
return == null
orig(this) has only one value
size(this.sessions[]) == 1
size(this.accounts[]) == 10
===========================================================================
transactionsystem.UserInfo.createAccount(java.lang.Integer):::EXIT
this.uid == orig(this.uid)
this.name == orig(this.name)
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
transactionsystem.UserInfo$UserMode.ACTIVE == orig(this.mode)
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == transactionsystem.UserInfo$UserType.NORMAL
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(this.type)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.sessions[] == orig(this.sessions[])
this.accounts == orig(this.accounts)
this.next_session_id == orig(this.next_session_id)
this.country == orig(this.country)
this.numOfTransactionsWhenGreyListed == orig(this.numOfTransactionsWhenGreyListed)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
(return != null)  <==>  (size(this.accounts[])-1 == orig(size(this.accounts[])))
(return != null)  ==>  (size(this.accounts[]) >= 1)
(return != null)  ==>  (size(this.sessions[]) one of { 1, 2 })
(return != null)  ==>  (this.country.toString > return.toString)
(return != null)  ==>  (this.country.toString one of { "France", "Romania", "Senegal" })
(return != null)  ==>  (this.name.toString > return.toString)
(return != null)  ==>  (this.sessions[].getClass().getName() one of { [transactionsystem.UserSession], [transactionsystem.UserSession, transactionsystem.UserSession] })
(return == null)  <==>  (orig(size(this.accounts[])) == 10)
(return == null)  ==>  (orig(sid) has only one value)
(return == null)  ==>  (orig(this) has only one value)
(return == null)  ==>  (orig(this.accounts[]) contains no nulls and has only one value, of length 10)
(return == null)  ==>  (orig(this.accounts[].getClass().getName()) == [transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount])
(return == null)  ==>  (orig(this.next_account) has only one value)
(return == null)  ==>  (size(this.accounts[]) == 10)
(return == null)  ==>  (size(this.sessions[]) == 1)
(return == null)  ==>  (this.accountRequestsPerSession has only one value)
(return == null)  ==>  (this.accounts has only one value)
(return == null)  ==>  (this.accounts[] contains no nulls and has only one value, of length 10)
(return == null)  ==>  (this.accounts[].getClass().getName() == [transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount, transactionsystem.UserAccount])
(return == null)  ==>  (this.country has only one value)
(return == null)  ==>  (this.country.toString == "France")
(return == null)  ==>  (this.name has only one value)
(return == null)  ==>  (this.name.toString == "Fred")
(return == null)  ==>  (this.next_account == orig(this.next_account))
(return == null)  ==>  (this.next_account has only one value)
(return == null)  ==>  (this.next_session_id has only one value)
(return == null)  ==>  (this.numOfTransactionsWhenGreyListed == orig(sid))
(return == null)  ==>  (this.sessions has only one value)
(return == null)  ==>  (this.sessions[] contains no nulls and has only one value, of length 1)
(return == null)  ==>  (this.sessions[] elements has only one value)
(return == null)  ==>  (this.sessions[].getClass().getName() == [transactionsystem.UserSession])
(return == null)  ==>  (this.uid == this.next_session_id)
(return == null)  ==>  (this.uid has only one value)
this.sessions != null
this.sessions[].getClass().getName() one of { [transactionsystem.UserSession], [transactionsystem.UserSession, transactionsystem.UserSession] }
this.accounts != null
this.next_session_id != null
this.next_account != null
this.country != null
this.country.toString one of { "France", "Romania", "Senegal" }
this.numOfTransactionsWhenGreyListed has only one value
this.numOfTransactionsWhenGreyListed != null
size(this.sessions[]) one of { 1, 2 }
size(this.accounts[]) >= 1
this.name.toString > return.toString
this.name.toString == orig(this.name.toString)
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
this.country.toString > return.toString
this.country.toString == orig(this.country.toString)
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 >= size(this.sessions[])
size(this.sessions[]) <= size(this.accounts[])
size(this.sessions[])-1 <= size(this.accounts[])-1
size(this.sessions[])-1 <= orig(size(this.accounts[]))
size(this.accounts[]) >= orig(size(this.accounts[]))
size(this.accounts[])-1 <= orig(size(this.accounts[]))
size(this.accounts[])-1 >= orig(size(this.accounts[]))-1
===========================================================================
transactionsystem.UserInfo.depositTo(java.lang.String, double):::ENTER
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
this.type == transactionsystem.UserInfo$UserType.NORMAL
this.status != null
this.sessions != null
this.accounts != null
this.accounts[].getClass().getName() == [transactionsystem.UserAccount]
this.next_session_id != null
this.next_account has only one value
this.next_account != null
this.country != null
this.country.toString one of { "France", "Romania", "Senegal" }
this.numOfTransactionsWhenGreyListed != null
account_number != null
amount one of { 100.0, 500.0, 1000.0 }
size(this.sessions[]) one of { 1, 2, 3 }
size(this.accounts[]) == 1
this.name.toString > account_number.toString
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
this.country.toString > account_number.toString
size(transactionsystem.UserInfo$UserMode.$VALUES[]) >= size(this.sessions[])
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 >= size(this.sessions[])-1
size(this.sessions[]) >= size(this.accounts[])
size(this.sessions[])-1 >= size(this.accounts[])-1
===========================================================================
transactionsystem.UserInfo.depositTo(java.lang.String, double):::EXIT
this.uid == orig(this.uid)
this.name == orig(this.name)
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
transactionsystem.UserInfo$UserMode.ACTIVE == orig(this.mode)
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == transactionsystem.UserInfo$UserType.NORMAL
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(this.type)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.sessions[] == orig(this.sessions[])
this.accounts == orig(this.accounts)
this.accounts[] == orig(this.accounts[])
this.next_session_id == orig(this.next_session_id)
this.next_account == orig(this.next_account)
this.country == orig(this.country)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
this.status != null
this.sessions != null
this.accounts != null
this.accounts[].getClass().getName() == [transactionsystem.UserAccount]
this.next_session_id != null
this.next_account has only one value
this.next_account != null
this.country != null
this.country.toString one of { "France", "Romania", "Senegal" }
this.numOfTransactionsWhenGreyListed != null
size(this.sessions[]) one of { 1, 2, 3 }
size(this.accounts[]) == 1
this.name.toString > account_number.toString
this.name.toString == orig(this.name.toString)
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
this.country.toString > account_number.toString
this.country.toString == orig(this.country.toString)
account_number.toString == orig(account_number.toString)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) >= size(this.sessions[])
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 >= size(this.sessions[])-1
size(this.sessions[]) >= size(this.accounts[])
size(this.sessions[])-1 >= size(this.accounts[])-1
===========================================================================
transactionsystem.UserInfo.getAccount(java.lang.String):::ENTER
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
this.type == transactionsystem.UserInfo$UserType.NORMAL
this.status != null
this.sessions != null
this.accounts != null
this.next_session_id != null
this.next_account != null
this.country != null
this.country.toString one of { "France", "Romania", "Senegal" }
this.numOfTransactionsWhenGreyListed != null
account_number != null
size(this.sessions[]) one of { 1, 2, 3 }
size(this.accounts[]) >= 1
this.name.toString > account_number.toString
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
this.country.toString > account_number.toString
size(transactionsystem.UserInfo$UserMode.$VALUES[]) >= size(this.sessions[])
size(transactionsystem.UserInfo$UserMode.$VALUES[]) != size(this.accounts[])-1
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 >= size(this.sessions[])-1
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 != size(this.accounts[])
size(this.accounts[])-1 % size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 == 0
size(this.accounts[])-1 % size(this.sessions[]) == 0
size(this.sessions[]) != size(this.accounts[])-1
===========================================================================
transactionsystem.UserInfo.getAccount(java.lang.String):::EXIT168
===========================================================================
transactionsystem.UserInfo.getAccount(java.lang.String):::EXIT
this.uid == return.owner
this.uid == orig(this.uid)
this.name == orig(this.name)
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
transactionsystem.UserInfo$UserMode.ACTIVE == orig(this.mode)
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == transactionsystem.UserInfo$UserType.NORMAL
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(this.type)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.sessions[] == orig(this.sessions[])
this.accounts == orig(this.accounts)
this.accounts[] == orig(this.accounts[])
this.next_session_id == orig(this.next_session_id)
this.next_account == orig(this.next_account)
this.country == orig(this.country)
this.numOfTransactionsWhenGreyListed == orig(this.numOfTransactionsWhenGreyListed)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
return.account_number == orig(account_number)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
this.status != null
this.sessions != null
this.accounts != null
this.next_session_id != null
this.next_account != null
this.country != null
this.country.toString one of { "France", "Romania", "Senegal" }
this.numOfTransactionsWhenGreyListed != null
return != null
return.account_number != null
return.balance >= 0.0
size(this.sessions[]) one of { 1, 2, 3 }
size(this.accounts[]) >= 1
this.name.toString > account_number.toString
this.name.toString == orig(this.name.toString)
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
return in this.accounts[]
this.country.toString > account_number.toString
this.country.toString == orig(this.country.toString)
account_number.toString == return.account_number.toString
account_number.toString == orig(account_number.toString)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) >= size(this.sessions[])
size(transactionsystem.UserInfo$UserMode.$VALUES[]) != size(this.accounts[])-1
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 >= size(this.sessions[])-1
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 != size(this.accounts[])
size(this.accounts[])-1 % size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 == 0
size(this.accounts[])-1 % size(this.sessions[]) == 0
size(this.sessions[]) != size(this.accounts[])-1
===========================================================================
transactionsystem.UserInfo.getId():::ENTER
this.mode != null
this.status != null
this.type != null
this.sessions != null
this.accounts != null
this.next_session_id != null
this.next_account != null
this.country != null
this.numOfTransactionsWhenGreyListed != null
this.mode in transactionsystem.UserInfo$UserMode.$VALUES[]
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
this.type in transactionsystem.UserInfo$UserType.$VALUES[]
===========================================================================
transactionsystem.UserInfo.getId():::EXIT
this.uid == return
this.name == orig(this.name)
this.mode == orig(this.mode)
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == orig(this.type)
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.sessions[] == orig(this.sessions[])
this.accounts == orig(this.accounts)
this.accounts[] == orig(this.accounts[])
this.next_session_id == orig(this.next_session_id)
this.next_account == orig(this.next_account)
this.country == orig(this.country)
this.numOfTransactionsWhenGreyListed == orig(this.numOfTransactionsWhenGreyListed)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
return == orig(this.uid)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
this.mode != null
this.status != null
this.type != null
this.sessions != null
this.accounts != null
this.next_session_id != null
this.next_account != null
this.country != null
this.numOfTransactionsWhenGreyListed != null
return != null
this.name.toString == orig(this.name.toString)
this.mode in transactionsystem.UserInfo$UserMode.$VALUES[]
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
this.type in transactionsystem.UserInfo$UserType.$VALUES[]
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
this.country.toString == orig(this.country.toString)
===========================================================================
transactionsystem.UserInfo.getSession(java.lang.Integer):::ENTER
this.type == transactionsystem.UserInfo$UserType.NORMAL
this.mode != null
this.status != null
this.sessions != null
this.accounts != null
this.next_session_id != null
this.next_account != null
this.country != null
this.country.toString one of { "France", "Romania", "Senegal" }
this.numOfTransactionsWhenGreyListed != null
sid != null
this.mode in transactionsystem.UserInfo$UserMode.$VALUES[]
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
===========================================================================
transactionsystem.UserInfo.getSession(java.lang.Integer):::EXIT137
===========================================================================
transactionsystem.UserInfo.getSession(java.lang.Integer):::EXIT
this.uid == return.owner
this.uid == orig(this.uid)
this.name == orig(this.name)
this.mode == orig(this.mode)
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == transactionsystem.UserInfo$UserType.NORMAL
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(this.type)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.sessions[] == orig(this.sessions[])
this.accounts == orig(this.accounts)
this.accounts[] == orig(this.accounts[])
this.next_session_id == orig(this.next_session_id)
this.next_account == orig(this.next_account)
this.country == orig(this.country)
this.numOfTransactionsWhenGreyListed == orig(this.numOfTransactionsWhenGreyListed)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
return.sid == orig(sid)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
this.mode != null
this.status != null
this.sessions != null
this.accounts != null
this.next_session_id != null
this.next_account != null
this.country != null
this.country.toString one of { "France", "Romania", "Senegal" }
this.numOfTransactionsWhenGreyListed != null
return != null
return.sid != null
return.log != null
this.name.toString != return.log.toString
this.name.toString == orig(this.name.toString)
this.mode in transactionsystem.UserInfo$UserMode.$VALUES[]
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
return in this.sessions[]
this.country.toString != return.log.toString
this.country.toString == orig(this.country.toString)
===========================================================================
transactionsystem.UserInfo.getSessions():::ENTER
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
this.type == transactionsystem.UserInfo$UserType.NORMAL
this.status != null
this.sessions != null
this.accounts != null
this.next_session_id != null
this.next_account != null
this.country != null
this.country.toString one of { "France", "Romania", "Senegal" }
this.numOfTransactionsWhenGreyListed != null
size(this.accounts[]) one of { 0, 1, 6 }
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
size(transactionsystem.UserInfo$UserMode.$VALUES[]) != size(this.accounts[])
size(transactionsystem.UserInfo$UserMode.$VALUES[]) != size(this.accounts[])-1
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 != size(this.accounts[])
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 != size(this.accounts[])-1
size(this.sessions[]) != size(this.accounts[])-1
===========================================================================
transactionsystem.UserInfo.getSessions():::EXIT
this.uid == orig(this.uid)
this.name == orig(this.name)
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
transactionsystem.UserInfo$UserMode.ACTIVE == orig(this.mode)
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == transactionsystem.UserInfo$UserType.NORMAL
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(this.type)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == return
this.sessions[] == return[]
this.accounts == orig(this.accounts)
this.accounts[] == orig(this.accounts[])
this.next_session_id == orig(this.next_session_id)
this.next_account == orig(this.next_account)
this.country == orig(this.country)
this.numOfTransactionsWhenGreyListed == orig(this.numOfTransactionsWhenGreyListed)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
return == orig(this.sessions)
return[] == orig(this.sessions[])
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
this.status != null
this.accounts != null
this.next_session_id != null
this.next_account != null
this.country != null
this.country.toString one of { "France", "Romania", "Senegal" }
this.numOfTransactionsWhenGreyListed != null
return != null
return[] elements != null
return[].getClass().getName() elements == transactionsystem.UserSession.class
size(this.accounts[]) one of { 0, 1, 6 }
this.name.toString == orig(this.name.toString)
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
this.country.toString == orig(this.country.toString)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) != size(this.accounts[])
size(transactionsystem.UserInfo$UserMode.$VALUES[]) != size(this.accounts[])-1
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 != size(this.accounts[])
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 != size(this.accounts[])-1
size(this.accounts[])-1 != size(return[])
===========================================================================
transactionsystem.UserInfo.greylist():::ENTER
this.uid == this.next_account
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
this.type == transactionsystem.UserInfo$UserType.NORMAL
size(this.sessions[]) == size(this.accounts[])
this.uid has only one value
this.name has only one value
this.name.toString == "Sandy"
this.sessions[].getClass().getName() == [transactionsystem.UserSession]
this.accounts[].getClass().getName() == [transactionsystem.UserAccount]
this.next_session_id has only one value
this.country has only one value
this.country.toString == "Senegal"
this.numOfTransactionsWhenGreyListed has only one value
size(this.sessions[]) == 1
===========================================================================
transactionsystem.UserInfo.greylist():::EXIT
this.uid == this.next_account
this.uid == orig(this.uid)
this.uid == orig(this.next_account)
this.name == orig(this.name)
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
transactionsystem.UserInfo$UserMode.ACTIVE == orig(this.mode)
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == transactionsystem.UserInfo$UserStatus.GREYLISTED
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == transactionsystem.UserInfo$UserType.NORMAL
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(this.type)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.sessions[] == orig(this.sessions[])
this.accounts == orig(this.accounts)
this.accounts[] == orig(this.accounts[])
this.next_session_id == orig(this.next_session_id)
this.country == orig(this.country)
this.numOfTransactionsWhenGreyListed == orig(this.numOfTransactionsWhenGreyListed)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
size(this.sessions[]) == size(this.accounts[])
size(this.sessions[]) == orig(size(this.accounts[]))
this.uid has only one value
this.name has only one value
this.name.toString == "Sandy"
this.sessions[].getClass().getName() == [transactionsystem.UserSession]
this.accounts[].getClass().getName() == [transactionsystem.UserAccount]
this.next_session_id has only one value
this.country has only one value
this.country.toString == "Senegal"
this.numOfTransactionsWhenGreyListed has only one value
size(this.sessions[]) == 1
this.name.toString == orig(this.name.toString)
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
this.country.toString == orig(this.country.toString)
===========================================================================
transactionsystem.UserInfo.isActive():::ENTER
this.type == transactionsystem.UserInfo$UserType.NORMAL
this.mode != null
this.status != null
this.sessions != null
this.accounts != null
this.next_session_id != null
this.next_account != null
this.country != null
this.country.toString one of { "France", "Romania", "Senegal" }
this.numOfTransactionsWhenGreyListed != null
size(this.accounts[]) one of { 0, 1, 6 }
this.mode in transactionsystem.UserInfo$UserMode.$VALUES[]
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
size(transactionsystem.UserInfo$UserMode.$VALUES[]) != size(this.accounts[])
size(transactionsystem.UserInfo$UserMode.$VALUES[]) != size(this.accounts[])-1
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 != size(this.accounts[])
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 != size(this.accounts[])-1
size(this.sessions[]) != size(this.accounts[])-1
===========================================================================
transactionsystem.UserInfo.isActive():::EXIT
this.uid == orig(this.uid)
this.name == orig(this.name)
this.mode == orig(this.mode)
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == transactionsystem.UserInfo$UserType.NORMAL
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(this.type)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.sessions[] == orig(this.sessions[])
this.accounts == orig(this.accounts)
this.accounts[] == orig(this.accounts[])
this.next_session_id == orig(this.next_session_id)
this.next_account == orig(this.next_account)
this.country == orig(this.country)
this.numOfTransactionsWhenGreyListed == orig(this.numOfTransactionsWhenGreyListed)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (size(this.accounts[]) == 1)
(return == false)  ==>  (size(this.sessions[]) == 1)
(return == false)  ==>  (size(this.sessions[]) == size(this.accounts[]))
(return == false)  ==>  (this.accountRequestsPerSession has only one value)
(return == false)  ==>  (this.accounts has only one value)
(return == false)  ==>  (this.accounts[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (this.accounts[] elements has only one value)
(return == false)  ==>  (this.accounts[].getClass().getName() == [transactionsystem.UserAccount])
(return == false)  ==>  (this.country has only one value)
(return == false)  ==>  (this.country.toString == "France")
(return == false)  ==>  (this.mode == transactionsystem.UserInfo$UserMode.DISABLED)
(return == false)  ==>  (this.name has only one value)
(return == false)  ==>  (this.name.toString == "Fred")
(return == false)  ==>  (this.next_account has only one value)
(return == false)  ==>  (this.next_session_id has only one value)
(return == false)  ==>  (this.numOfTransactionsWhenGreyListed has only one value)
(return == false)  ==>  (this.sessions has only one value)
(return == false)  ==>  (this.sessions[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (this.sessions[] elements has only one value)
(return == false)  ==>  (this.sessions[].getClass().getName() == [transactionsystem.UserSession])
(return == false)  ==>  (this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED)
(return == false)  ==>  (this.status has only one value)
(return == false)  ==>  (this.uid == this.next_session_id)
(return == false)  ==>  (this.uid == this.numOfTransactionsWhenGreyListed)
(return == false)  ==>  (this.uid has only one value)
(return == true)  ==>  (size(this.accounts[]) one of { 0, 1, 6 })
(return == true)  ==>  (this.country.toString one of { "France", "Romania", "Senegal" })
(return == true)  ==>  (this.mode == transactionsystem.UserInfo$UserMode.ACTIVE)
this.mode != null
this.status != null
this.sessions != null
this.accounts != null
this.next_session_id != null
this.next_account != null
this.country != null
this.country.toString one of { "France", "Romania", "Senegal" }
this.numOfTransactionsWhenGreyListed != null
size(this.accounts[]) one of { 0, 1, 6 }
this.name.toString == orig(this.name.toString)
this.mode in transactionsystem.UserInfo$UserMode.$VALUES[]
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
this.country.toString == orig(this.country.toString)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) != size(this.accounts[])
size(transactionsystem.UserInfo$UserMode.$VALUES[]) != size(this.accounts[])-1
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 != size(this.accounts[])
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 != size(this.accounts[])-1
size(this.sessions[]) != size(this.accounts[])-1
===========================================================================
transactionsystem.UserInfo.isActive():::EXIT;condition="return == true"
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
transactionsystem.UserInfo$UserMode.ACTIVE == orig(this.mode)
return == true
===========================================================================
transactionsystem.UserInfo.isActive():::EXIT;condition="not(return == true)"
this.uid == this.next_session_id
this.uid == this.numOfTransactionsWhenGreyListed
this.uid == orig(this.next_session_id)
this.uid == orig(this.numOfTransactionsWhenGreyListed)
this.mode == transactionsystem.UserInfo$UserMode.DISABLED
transactionsystem.UserInfo$UserMode.DISABLED == orig(this.mode)
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(this.status)
size(this.sessions[]) == size(this.accounts[])
size(this.sessions[]) == orig(size(this.accounts[]))
this.uid has only one value
this.name has only one value
this.name.toString == "Fred"
this.sessions has only one value
this.sessions[] contains no nulls and has only one value, of length 1
this.sessions[] elements has only one value
this.sessions[].getClass().getName() == [transactionsystem.UserSession]
this.accounts has only one value
this.accounts[] contains no nulls and has only one value, of length 1
this.accounts[] elements has only one value
this.accounts[].getClass().getName() == [transactionsystem.UserAccount]
this.next_account has only one value
this.country has only one value
this.country.toString == "France"
this.accountRequestsPerSession has only one value
return == false
orig(this) has only one value
size(this.sessions[]) == 1
===========================================================================
transactionsystem.UserInfo.isGoldUser():::ENTER
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
this.next_session_id == this.numOfTransactionsWhenGreyListed
size(this.sessions[]) == size(this.accounts[])
this.type != null
this.sessions != null
this.sessions[].getClass().getName() one of { [], [transactionsystem.UserSession] }
this.accounts != null
this.accounts[].getClass().getName() one of { [], [transactionsystem.UserAccount] }
this.next_session_id != null
this.next_account != null
this.country != null
this.country.toString one of { "Argentina", "France", "Senegal" }
size(this.sessions[]) one of { 0, 1 }
this.type in transactionsystem.UserInfo$UserType.$VALUES[]
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 > size(this.sessions[])
===========================================================================
transactionsystem.UserInfo.isGoldUser():::EXIT
this.uid == orig(this.uid)
this.name == orig(this.name)
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
transactionsystem.UserInfo$UserMode.ACTIVE == orig(this.mode)
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == orig(this.type)
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.sessions[] == orig(this.sessions[])
this.accounts == orig(this.accounts)
this.accounts[] == orig(this.accounts[])
this.next_session_id == this.numOfTransactionsWhenGreyListed
this.next_session_id == orig(this.next_session_id)
this.next_session_id == orig(this.numOfTransactionsWhenGreyListed)
this.next_account == orig(this.next_account)
this.country == orig(this.country)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
size(this.sessions[]) == size(this.accounts[])
size(this.sessions[]) == orig(size(this.accounts[]))
(this.country.toString == "Argentina")  <==>  (return == true)
(this.country.toString == "Argentina")  ==>  (orig(this) has only one value)
(this.country.toString == "Argentina")  ==>  (this.accountRequestsPerSession has only one value)
(this.country.toString == "Argentina")  ==>  (this.accounts has only one value)
(this.country.toString == "Argentina")  ==>  (this.accounts[] == [])
(this.country.toString == "Argentina")  ==>  (this.accounts[].getClass().getName() == [])
(this.country.toString == "Argentina")  ==>  (this.country has only one value)
(this.country.toString == "Argentina")  ==>  (this.name has only one value)
(this.country.toString == "Argentina")  ==>  (this.name.toString == "Marge")
(this.country.toString == "Argentina")  ==>  (this.next_account has only one value)
(this.country.toString == "Argentina")  ==>  (this.next_session_id has only one value)
(this.country.toString == "Argentina")  ==>  (this.sessions has only one value)
(this.country.toString == "Argentina")  ==>  (this.sessions[] == [])
(this.country.toString == "Argentina")  ==>  (this.sessions[] == this.accounts[])
(this.country.toString == "Argentina")  ==>  (this.sessions[].getClass().getName() == [])
(this.country.toString == "Argentina")  ==>  (this.type == transactionsystem.UserInfo$UserType.GOLD)
(this.country.toString == "Argentina")  ==>  (this.uid == this.next_account)
(this.country.toString == "Argentina")  ==>  (this.uid has only one value)
(this.country.toString one of { "France", "Senegal" })  <==>  (return == false)
(this.country.toString one of { "France", "Senegal" })  ==>  (size(this.sessions[]) one of { 0, 1 })
(this.country.toString one of { "France", "Senegal" })  ==>  (this.accounts[].getClass().getName() elements == transactionsystem.UserAccount.class)
(this.country.toString one of { "France", "Senegal" })  ==>  (this.accounts[].getClass().getName() one of { [], [transactionsystem.UserAccount] })
(this.country.toString one of { "France", "Senegal" })  ==>  (this.sessions[].getClass().getName() elements == transactionsystem.UserSession.class)
(this.country.toString one of { "France", "Senegal" })  ==>  (this.sessions[].getClass().getName() one of { [], [transactionsystem.UserSession] })
(this.country.toString one of { "France", "Senegal" })  ==>  (this.type == transactionsystem.UserInfo$UserType.NORMAL)
this.type != null
this.sessions != null
this.sessions[].getClass().getName() one of { [], [transactionsystem.UserSession] }
this.accounts != null
this.accounts[].getClass().getName() one of { [], [transactionsystem.UserAccount] }
this.next_session_id != null
this.next_account != null
this.country != null
this.country.toString one of { "Argentina", "France", "Senegal" }
size(this.sessions[]) one of { 0, 1 }
this.name.toString == orig(this.name.toString)
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
this.type in transactionsystem.UserInfo$UserType.$VALUES[]
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
this.country.toString == orig(this.country.toString)
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 > size(this.sessions[])
===========================================================================
transactionsystem.UserInfo.isGoldUser():::EXIT;condition="return == true"
this.uid == this.next_account
this.uid == orig(this.next_account)
this.type == transactionsystem.UserInfo$UserType.GOLD
transactionsystem.UserInfo$UserType.GOLD == orig(this.type)
this.sessions[] == this.accounts[]
this.sessions[] == orig(this.accounts[])
this.uid has only one value
this.name has only one value
this.name.toString == "Marge"
this.sessions has only one value
this.sessions[] == []
this.sessions[].getClass().getName() == []
this.accounts has only one value
this.next_session_id has only one value
this.country has only one value
this.country.toString == "Argentina"
this.accountRequestsPerSession has only one value
return == true
orig(this) has only one value
===========================================================================
transactionsystem.UserInfo.isGoldUser():::EXIT;condition="not(return == true)"
this.type == transactionsystem.UserInfo$UserType.NORMAL
transactionsystem.UserInfo$UserType.NORMAL == orig(this.type)
this.country.toString one of { "France", "Senegal" }
return == false
===========================================================================
transactionsystem.UserInfo.isNormalUser():::ENTER
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
this.type == transactionsystem.UserInfo$UserType.NORMAL
this.next_session_id == this.numOfTransactionsWhenGreyListed
size(this.sessions[]) == size(this.accounts[])
this.sessions != null
this.sessions[].getClass().getName() == [transactionsystem.UserSession]
this.accounts != null
this.accounts[].getClass().getName() == [transactionsystem.UserAccount]
this.next_session_id has only one value
this.next_session_id != null
this.next_account has only one value
this.next_account != null
this.country != null
this.country.toString one of { "France", "Senegal" }
size(this.sessions[]) == 1
===========================================================================
transactionsystem.UserInfo.isNormalUser():::EXIT
this.uid == orig(this.uid)
this.name == orig(this.name)
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
transactionsystem.UserInfo$UserMode.ACTIVE == orig(this.mode)
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == transactionsystem.UserInfo$UserType.NORMAL
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(this.type)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.sessions[] == orig(this.sessions[])
this.accounts == orig(this.accounts)
this.accounts[] == orig(this.accounts[])
this.next_session_id == this.numOfTransactionsWhenGreyListed
this.next_session_id == orig(this.next_session_id)
this.next_session_id == orig(this.numOfTransactionsWhenGreyListed)
this.next_account == orig(this.next_account)
this.country == orig(this.country)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
size(this.sessions[]) == size(this.accounts[])
size(this.sessions[]) == orig(size(this.accounts[]))
this.sessions != null
this.sessions[].getClass().getName() == [transactionsystem.UserSession]
this.accounts != null
this.accounts[].getClass().getName() == [transactionsystem.UserAccount]
this.next_session_id has only one value
this.next_session_id != null
this.next_account has only one value
this.next_account != null
this.country != null
this.country.toString one of { "France", "Senegal" }
return == true
size(this.sessions[]) == 1
this.name.toString == orig(this.name.toString)
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
this.country.toString == orig(this.country.toString)
===========================================================================
transactionsystem.UserInfo.isNormalUser():::EXIT;condition="return == true"
===========================================================================
transactionsystem.UserInfo.isSilverUser():::ENTER
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
this.type == transactionsystem.UserInfo$UserType.NORMAL
this.next_session_id == this.numOfTransactionsWhenGreyListed
size(this.sessions[]) == size(this.accounts[])
this.sessions != null
this.sessions[].getClass().getName() == [transactionsystem.UserSession]
this.accounts != null
this.accounts[].getClass().getName() == [transactionsystem.UserAccount]
this.next_session_id has only one value
this.next_session_id != null
this.next_account has only one value
this.next_account != null
this.country != null
this.country.toString one of { "France", "Senegal" }
size(this.sessions[]) == 1
===========================================================================
transactionsystem.UserInfo.isSilverUser():::EXIT
this.uid == orig(this.uid)
this.name == orig(this.name)
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
transactionsystem.UserInfo$UserMode.ACTIVE == orig(this.mode)
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == transactionsystem.UserInfo$UserType.NORMAL
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(this.type)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.sessions[] == orig(this.sessions[])
this.accounts == orig(this.accounts)
this.accounts[] == orig(this.accounts[])
this.next_session_id == this.numOfTransactionsWhenGreyListed
this.next_session_id == orig(this.next_session_id)
this.next_session_id == orig(this.numOfTransactionsWhenGreyListed)
this.next_account == orig(this.next_account)
this.country == orig(this.country)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
size(this.sessions[]) == size(this.accounts[])
size(this.sessions[]) == orig(size(this.accounts[]))
this.sessions != null
this.sessions[].getClass().getName() == [transactionsystem.UserSession]
this.accounts != null
this.accounts[].getClass().getName() == [transactionsystem.UserAccount]
this.next_session_id has only one value
this.next_session_id != null
this.next_account has only one value
this.next_account != null
this.country != null
this.country.toString one of { "France", "Senegal" }
return == false
size(this.sessions[]) == 1
this.name.toString == orig(this.name.toString)
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
this.country.toString == orig(this.country.toString)
===========================================================================
transactionsystem.UserInfo.isSilverUser():::EXIT;condition="not(return == true)"
===========================================================================
transactionsystem.UserInfo.isWhitelisted():::ENTER
this.uid == this.next_account
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
this.type == transactionsystem.UserInfo$UserType.NORMAL
this.uid has only one value
this.name has only one value
this.name.toString == "Sandy"
this.sessions[].getClass().getName() one of { [transactionsystem.UserSession, transactionsystem.UserSession], [transactionsystem.UserSession, transactionsystem.UserSession, transactionsystem.UserSession] }
this.accounts[].getClass().getName() == [transactionsystem.UserAccount]
this.country has only one value
this.country.toString == "Senegal"
size(this.sessions[]) one of { 2, 3 }
size(this.accounts[]) == 1
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
===========================================================================
transactionsystem.UserInfo.isWhitelisted():::EXIT
this.uid == this.next_account
this.uid == orig(this.uid)
this.uid == orig(this.next_account)
this.name == orig(this.name)
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
transactionsystem.UserInfo$UserMode.ACTIVE == orig(this.mode)
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == transactionsystem.UserInfo$UserType.NORMAL
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(this.type)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.sessions[] == orig(this.sessions[])
this.accounts == orig(this.accounts)
this.accounts[] == orig(this.accounts[])
this.next_session_id == orig(this.next_session_id)
this.country == orig(this.country)
this.numOfTransactionsWhenGreyListed == orig(this.numOfTransactionsWhenGreyListed)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
(this.sessions[] contains no nulls and has only one value, of length 2)  <==>  (return == false)
(this.sessions[] contains no nulls and has only one value, of length 2)  <==>  (size(this.sessions[])-1 == size(this.accounts[]))
(this.sessions[] contains no nulls and has only one value, of length 2)  <==>  (size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 == size(this.sessions[]))
(this.sessions[] contains no nulls and has only one value, of length 2)  <==>  (this.accounts[] contains no nulls and has only one value, of length 1)
(this.sessions[] contains no nulls and has only one value, of length 2)  <==>  (this.sessions[].getClass().getName() == [transactionsystem.UserSession, transactionsystem.UserSession])
(this.sessions[] contains no nulls and has only one value, of length 2)  ==>  (this.status == transactionsystem.UserInfo$UserStatus.GREYLISTED)
(this.sessions[] contains no nulls and has only one value, of length 2)  ==>  (this.uid == this.next_session_id)
(this.sessions[] contains no nulls and has only one value, of length 2)  ==>  (this.uid == this.numOfTransactionsWhenGreyListed)
(this.sessions[] contains no nulls and has only one value, of length 3)  <==>  (return == true)
(this.sessions[] contains no nulls and has only one value, of length 3)  <==>  (size(this.sessions[]) == 3)
(this.sessions[] contains no nulls and has only one value, of length 3)  <==>  (size(transactionsystem.UserInfo$UserMode.$VALUES[]) == size(this.sessions[]))
(this.sessions[] contains no nulls and has only one value, of length 3)  <==>  (this.accounts[] contains no nulls and has only one value, of length 1)
(this.sessions[] contains no nulls and has only one value, of length 3)  <==>  (this.sessions[].getClass().getName() == [transactionsystem.UserSession, transactionsystem.UserSession, transactionsystem.UserSession])
(this.sessions[] contains no nulls and has only one value, of length 3)  ==>  (this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED)
this.uid has only one value
this.name has only one value
this.name.toString == "Sandy"
this.sessions[].getClass().getName() one of { [transactionsystem.UserSession, transactionsystem.UserSession], [transactionsystem.UserSession, transactionsystem.UserSession, transactionsystem.UserSession] }
this.accounts[].getClass().getName() == [transactionsystem.UserAccount]
this.country has only one value
this.country.toString == "Senegal"
size(this.sessions[]) one of { 2, 3 }
size(this.accounts[]) == 1
this.name.toString == orig(this.name.toString)
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
this.country.toString == orig(this.country.toString)
===========================================================================
transactionsystem.UserInfo.isWhitelisted():::EXIT;condition="return == true"
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(this.status)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == size(this.sessions[])
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(this.sessions[]))
this.sessions has only one value
this.sessions[] contains no nulls and has only one value, of length 3
this.sessions[].getClass().getName() == [transactionsystem.UserSession, transactionsystem.UserSession, transactionsystem.UserSession]
this.accounts has only one value
this.accounts[] contains no nulls and has only one value, of length 1
this.accounts[] elements has only one value
this.next_session_id has only one value
this.numOfTransactionsWhenGreyListed has only one value
this.accountRequestsPerSession has only one value
return == true
orig(this) has only one value
===========================================================================
transactionsystem.UserInfo.isWhitelisted():::EXIT;condition="not(return == true)"
this.uid == this.next_session_id
this.uid == this.numOfTransactionsWhenGreyListed
this.uid == orig(this.next_session_id)
this.uid == orig(this.numOfTransactionsWhenGreyListed)
this.status == transactionsystem.UserInfo$UserStatus.GREYLISTED
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(this.status)
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 == size(this.sessions[])
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 == orig(size(this.sessions[]))
size(this.sessions[])-1 == size(this.accounts[])
size(this.accounts[]) == orig(size(this.sessions[]))-1
this.sessions has only one value
this.sessions[] contains no nulls and has only one value, of length 2
this.sessions[].getClass().getName() == [transactionsystem.UserSession, transactionsystem.UserSession]
this.accounts has only one value
this.accounts[] contains no nulls and has only one value, of length 1
this.accounts[] elements has only one value
this.accountRequestsPerSession has only one value
return == false
orig(this) has only one value
===========================================================================
transactionsystem.UserInfo.makeActive():::ENTER
this.mode == transactionsystem.UserInfo$UserMode.DISABLED
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
this.next_session_id == this.numOfTransactionsWhenGreyListed
size(this.sessions[]) == size(this.accounts[])
this.type != null
this.sessions != null
this.sessions[] elements has only one value
this.sessions[].getClass().getName() one of { [], [transactionsystem.UserSession] }
this.accounts != null
this.accounts[] elements has only one value
this.accounts[].getClass().getName() one of { [], [transactionsystem.UserAccount] }
this.next_session_id != null
this.next_account != null
this.country != null
size(this.sessions[]) one of { 0, 1 }
this.type in transactionsystem.UserInfo$UserType.$VALUES[]
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 > size(this.sessions[])
===========================================================================
transactionsystem.UserInfo.makeActive():::EXIT
this.uid == orig(this.uid)
this.name == orig(this.name)
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(this.mode)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == orig(this.type)
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.sessions[] == orig(this.sessions[])
this.accounts == orig(this.accounts)
this.accounts[] == orig(this.accounts[])
this.next_session_id == this.numOfTransactionsWhenGreyListed
this.next_session_id == orig(this.next_session_id)
this.next_session_id == orig(this.numOfTransactionsWhenGreyListed)
this.next_account == orig(this.next_account)
this.country == orig(this.country)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
size(this.sessions[]) == size(this.accounts[])
size(this.sessions[]) == orig(size(this.accounts[]))
this.type != null
this.sessions != null
this.sessions[] elements has only one value
this.sessions[].getClass().getName() one of { [], [transactionsystem.UserSession] }
this.accounts != null
this.accounts[] elements has only one value
this.accounts[].getClass().getName() one of { [], [transactionsystem.UserAccount] }
this.next_session_id != null
this.next_account != null
this.country != null
size(this.sessions[]) one of { 0, 1 }
this.name.toString == orig(this.name.toString)
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
this.type in transactionsystem.UserInfo$UserType.$VALUES[]
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
this.country.toString == orig(this.country.toString)
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 > size(this.sessions[])
===========================================================================
transactionsystem.UserInfo.makeDisabled():::ENTER
this.next_session_id == this.numOfTransactionsWhenGreyListed
size(this.sessions[]) == size(this.accounts[])
this.sessions[].getClass().getName() one of { [], [transactionsystem.UserSession] }
this.accounts[].getClass().getName() one of { [], [transactionsystem.UserAccount] }
size(this.sessions[]) one of { 0, 1 }
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 > size(this.sessions[])
===========================================================================
transactionsystem.UserInfo.makeDisabled():::EXIT
this.uid == orig(this.uid)
this.name == orig(this.name)
this.mode == transactionsystem.UserInfo$UserMode.DISABLED
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[].getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES[].getClass().getName())
this.status == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == orig(this.type)
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.sessions[] == orig(this.sessions[])
this.accounts == orig(this.accounts)
this.accounts[] == orig(this.accounts[])
this.next_session_id == this.numOfTransactionsWhenGreyListed
this.next_session_id == orig(this.next_session_id)
this.next_session_id == orig(this.numOfTransactionsWhenGreyListed)
this.next_account == orig(this.next_account)
this.country == orig(this.country)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
size(transactionsystem.UserInfo$UserStatus.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserMode.$VALUES[]))
size(transactionsystem.UserInfo$UserStatus.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
size(this.sessions[]) == size(this.accounts[])
size(this.sessions[]) == orig(size(this.accounts[]))
this.sessions[].getClass().getName() one of { [], [transactionsystem.UserSession] }
this.accounts[].getClass().getName() one of { [], [transactionsystem.UserAccount] }
size(this.sessions[]) one of { 0, 1 }
this.name.toString == orig(this.name.toString)
transactionsystem.UserInfo$UserMode.ACTIVE in orig(transactionsystem.UserInfo$UserMode.$VALUES[])
transactionsystem.UserInfo$UserMode.DISABLED in orig(transactionsystem.UserInfo$UserMode.$VALUES[])
transactionsystem.UserInfo$UserMode.FROZEN in orig(transactionsystem.UserInfo$UserMode.$VALUES[])
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
orig(transactionsystem.UserInfo$UserMode.ACTIVE) in transactionsystem.UserInfo$UserMode.$VALUES[]
orig(transactionsystem.UserInfo$UserMode.DISABLED) in transactionsystem.UserInfo$UserMode.$VALUES[]
orig(transactionsystem.UserInfo$UserMode.FROZEN) in transactionsystem.UserInfo$UserMode.$VALUES[]
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[]) (elementwise)
transactionsystem.UserInfo$UserMode.$VALUES[].getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES[].getClass().getName()) (elementwise)
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() != orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() != orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
this.country.toString == orig(this.country.toString)
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 > size(this.sessions[])
size(transactionsystem.UserInfo$UserStatus.$VALUES[])-1 > size(this.sessions[])
===========================================================================
transactionsystem.UserInfo.makeGoldUser():::ENTER
this.uid == this.next_account
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
this.type == transactionsystem.UserInfo$UserType.NORMAL
this.sessions[] == this.accounts[]
this.next_session_id == this.numOfTransactionsWhenGreyListed
this has only one value
this.uid has only one value
this.name has only one value
this.name.toString == "Marge"
this.sessions has only one value
this.sessions[] == []
this.sessions[].getClass().getName() == []
this.accounts has only one value
this.next_session_id has only one value
this.country has only one value
this.country.toString == "Argentina"
this.accountRequestsPerSession has only one value
===========================================================================
transactionsystem.UserInfo.makeGoldUser():::EXIT
this.uid == this.next_account
this.uid == orig(this.uid)
this.uid == orig(this.next_account)
this.name == orig(this.name)
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
transactionsystem.UserInfo$UserMode.ACTIVE == orig(this.mode)
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == transactionsystem.UserInfo$UserType.GOLD
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(this.type)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.sessions[] == this.accounts[]
this.sessions[] == orig(this.sessions[])
this.sessions[] == orig(this.accounts[])
this.accounts == orig(this.accounts)
this.next_session_id == this.numOfTransactionsWhenGreyListed
this.next_session_id == orig(this.next_session_id)
this.next_session_id == orig(this.numOfTransactionsWhenGreyListed)
this.country == orig(this.country)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
this.uid has only one value
this.name has only one value
this.name.toString == "Marge"
this.sessions has only one value
this.sessions[] == []
this.sessions[].getClass().getName() == []
this.accounts has only one value
this.next_session_id has only one value
this.country has only one value
this.country.toString == "Argentina"
this.accountRequestsPerSession has only one value
this.name.toString == orig(this.name.toString)
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
this.country.toString == orig(this.country.toString)
===========================================================================
transactionsystem.UserInfo.makeNormalUser():::ENTER
this.mode == transactionsystem.UserInfo$UserMode.DISABLED
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
this.sessions == this.accounts
this.next_session_id == this.next_account
this.next_session_id == this.numOfTransactionsWhenGreyListed
this.type == null
this.sessions == null
this.next_session_id == null
this.country == null
===========================================================================
transactionsystem.UserInfo.makeNormalUser():::EXIT
this.uid == orig(this.uid)
this.name == orig(this.name)
this.mode == transactionsystem.UserInfo$UserMode.DISABLED
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(this.mode)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == transactionsystem.UserInfo$UserType.NORMAL
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[].getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES[].getClass().getName())
this.sessions == this.accounts
this.sessions == orig(this.sessions)
this.sessions == orig(this.accounts)
this.next_session_id == this.next_account
this.next_session_id == this.numOfTransactionsWhenGreyListed
this.next_session_id == orig(this.next_session_id)
this.next_session_id == orig(this.next_account)
this.next_session_id == orig(this.numOfTransactionsWhenGreyListed)
this.country == orig(this.country)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
this.sessions == null
this.next_session_id == null
this.country == null
this.name.toString == orig(this.name.toString)
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() != orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() != orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.GOLD in orig(transactionsystem.UserInfo$UserType.$VALUES[])
transactionsystem.UserInfo$UserType.SILVER in orig(transactionsystem.UserInfo$UserType.$VALUES[])
transactionsystem.UserInfo$UserType.NORMAL in orig(transactionsystem.UserInfo$UserType.$VALUES[])
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
orig(transactionsystem.UserInfo$UserType.GOLD) in transactionsystem.UserInfo$UserType.$VALUES[]
orig(transactionsystem.UserInfo$UserType.SILVER) in transactionsystem.UserInfo$UserType.$VALUES[]
orig(transactionsystem.UserInfo$UserType.NORMAL) in transactionsystem.UserInfo$UserType.$VALUES[]
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[]) (elementwise)
transactionsystem.UserInfo$UserType.$VALUES[].getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES[].getClass().getName()) (elementwise)
===========================================================================
transactionsystem.UserInfo.makeSilverUser():::ENTER
this.uid == this.next_session_id
this.uid == this.numOfTransactionsWhenGreyListed
this.mode == transactionsystem.UserInfo$UserMode.DISABLED
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
this.type == transactionsystem.UserInfo$UserType.NORMAL
this.sessions[] == this.accounts[]
this.uid has only one value
this.name has only one value
this.name.toString == "Clark Kent"
this.sessions != null
this.sessions[] == []
this.sessions[].getClass().getName() == []
this.accounts != null
this.next_account has only one value
this.next_account != null
this.country has only one value
this.country != null
this.country.toString == "Malta"
this.name.toString < this.country.toString
===========================================================================
transactionsystem.UserInfo.makeSilverUser():::EXIT
this.uid == this.next_session_id
this.uid == this.numOfTransactionsWhenGreyListed
this.uid == orig(this.uid)
this.uid == orig(this.next_session_id)
this.uid == orig(this.numOfTransactionsWhenGreyListed)
this.name == orig(this.name)
this.mode == transactionsystem.UserInfo$UserMode.DISABLED
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(this.mode)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == transactionsystem.UserInfo$UserType.SILVER
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(this.type)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.sessions[] == this.accounts[]
this.sessions[] == orig(this.sessions[])
this.sessions[] == orig(this.accounts[])
this.accounts == orig(this.accounts)
this.next_account == orig(this.next_account)
this.country == orig(this.country)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
this.uid has only one value
this.name has only one value
this.name.toString == "Clark Kent"
this.sessions != null
this.sessions[] == []
this.sessions[].getClass().getName() == []
this.accounts != null
this.next_account has only one value
this.next_account != null
this.country has only one value
this.country != null
this.country.toString == "Malta"
this.name.toString < this.country.toString
this.name.toString == orig(this.name.toString)
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
this.country.toString == orig(this.country.toString)
===========================================================================
transactionsystem.UserInfo.openSession():::ENTER
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
this.type == transactionsystem.UserInfo$UserType.NORMAL
this.status != null
this.sessions != null
this.accounts != null
this.next_session_id != null
this.next_account != null
this.country != null
this.country.toString one of { "France", "Romania", "Senegal" }
this.numOfTransactionsWhenGreyListed != null
size(this.accounts[]) one of { 0, 1, 6 }
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
size(transactionsystem.UserInfo$UserMode.$VALUES[]) != size(this.accounts[])
size(transactionsystem.UserInfo$UserMode.$VALUES[]) != size(this.accounts[])-1
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 != size(this.accounts[])
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 != size(this.accounts[])-1
size(this.sessions[]) != size(this.accounts[])-1
===========================================================================
transactionsystem.UserInfo.openSession():::EXIT
this.uid == orig(this.uid)
this.name == orig(this.name)
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
transactionsystem.UserInfo$UserMode.ACTIVE == orig(this.mode)
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == transactionsystem.UserInfo$UserType.NORMAL
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(this.type)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.accounts == orig(this.accounts)
this.accounts[] == orig(this.accounts[])
this.next_account == orig(this.next_account)
this.country == orig(this.country)
this.numOfTransactionsWhenGreyListed == orig(this.numOfTransactionsWhenGreyListed)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
return == orig(this.next_session_id)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
size(this.sessions[])-1 == orig(size(this.sessions[]))
this.status != null
this.sessions != null
this.accounts != null
this.next_session_id != null
this.next_account != null
this.country != null
this.country.toString one of { "France", "Romania", "Senegal" }
this.numOfTransactionsWhenGreyListed != null
return != null
size(this.sessions[]) >= 1
size(this.accounts[]) one of { 0, 1, 6 }
this.name.toString == orig(this.name.toString)
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
this.country.toString == orig(this.country.toString)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) != size(this.accounts[])
size(transactionsystem.UserInfo$UserMode.$VALUES[]) != size(this.accounts[])-1
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 != size(this.accounts[])
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 != size(this.accounts[])-1
size(this.sessions[]) != size(this.accounts[])
size(this.sessions[]) != size(this.accounts[])-1
size(this.sessions[])-1 != size(this.accounts[])-1
===========================================================================
transactionsystem.UserInfo.whitelist():::ENTER
this.mode != null
this.sessions[].getClass().getName() one of { [transactionsystem.UserSession, transactionsystem.UserSession], [transactionsystem.UserSession, transactionsystem.UserSession, transactionsystem.UserSession] }
this.accounts[].getClass().getName() == [transactionsystem.UserAccount]
this.country.toString == "Senegal"
size(this.sessions[]) one of { 2, 3 }
size(this.accounts[]) == 1
this.mode in transactionsystem.UserInfo$UserMode.$VALUES[]
===========================================================================
transactionsystem.UserInfo.whitelist():::EXIT103
this.uid == this.next_session_id
this.uid == this.next_account
this.uid == this.numOfTransactionsWhenGreyListed
this.uid == orig(this.next_session_id)
this.uid == orig(this.next_account)
this.uid == orig(this.numOfTransactionsWhenGreyListed)
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
transactionsystem.UserInfo$UserMode.ACTIVE == orig(this.mode)
this.status == transactionsystem.UserInfo$UserStatus.GREYLISTED
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(this.status)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == transactionsystem.UserInfo$UserType.NORMAL
transactionsystem.UserInfo$UserType.NORMAL == orig(this.type)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 == size(this.sessions[])
size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 == orig(size(this.sessions[]))
size(this.sessions[])-1 == size(this.accounts[])
size(this.accounts[]) == orig(size(this.sessions[]))-1
this.uid has only one value
this.name has only one value
this.name.toString == "Sandy"
this.sessions has only one value
this.sessions[] contains no nulls and has only one value, of length 2
this.sessions[].getClass().getName() == [transactionsystem.UserSession, transactionsystem.UserSession]
this.accounts has only one value
this.accounts[] contains no nulls and has only one value, of length 1
this.accounts[] elements has only one value
this.country has only one value
this.accountRequestsPerSession has only one value
orig(this) has only one value
===========================================================================
transactionsystem.UserInfo.whitelist():::EXIT105
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == size(this.sessions[])
size(transactionsystem.UserInfo$UserType.$VALUES[]) == size(this.sessions[])
this.sessions[] contains no nulls and has only one value, of length 3
this.sessions[].getClass().getName() == [transactionsystem.UserSession, transactionsystem.UserSession, transactionsystem.UserSession]
this.accounts[] contains no nulls and has only one value, of length 1
this.accounts[] elements has only one value
size(this.sessions[]) == 3
===========================================================================
transactionsystem.UserInfo.whitelist():::EXIT
this.uid == orig(this.uid)
this.name == orig(this.name)
this.mode == orig(this.mode)
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[].getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES[].getClass().getName())
this.type == orig(this.type)
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.sessions[] == orig(this.sessions[])
this.accounts == orig(this.accounts)
this.accounts[] == orig(this.accounts[])
this.next_session_id == orig(this.next_session_id)
this.next_account == orig(this.next_account)
this.country == orig(this.country)
this.numOfTransactionsWhenGreyListed == orig(this.numOfTransactionsWhenGreyListed)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
size(transactionsystem.UserInfo$UserType.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
(this.sessions has only one value)  <==>  (size(this.sessions[])-1 == size(this.accounts[]))
(this.sessions has only one value)  <==>  (size(transactionsystem.UserInfo$UserMode.$VALUES[])-1 == size(this.sessions[]))
(this.sessions has only one value)  <==>  (this.accounts has only one value)
(this.sessions has only one value)  <==>  (this.accounts[] contains no nulls and has only one value, of length 1)
(this.sessions has only one value)  <==>  (this.next_session_id has only one value)
(this.sessions has only one value)  <==>  (this.numOfTransactionsWhenGreyListed has only one value)
(this.sessions has only one value)  <==>  (this.sessions[] contains no nulls and has only one value, of length 2)
(this.sessions has only one value)  <==>  (this.sessions[].getClass().getName() == [transactionsystem.UserSession, transactionsystem.UserSession])
(this.sessions has only one value)  ==>  (orig(this) has only one value)
(this.sessions has only one value)  ==>  (orig(this.status) has only one value)
(this.sessions has only one value)  ==>  (orig(this.status) in orig(transactionsystem.UserInfo$UserStatus.$VALUES[]))
(this.sessions has only one value)  ==>  (orig(this.status) in transactionsystem.UserInfo$UserStatus.$VALUES[])
(this.sessions has only one value)  ==>  (this.accountRequestsPerSession has only one value)
(this.sessions has only one value)  ==>  (this.country has only one value)
(this.sessions has only one value)  ==>  (this.mode == transactionsystem.UserInfo$UserMode.ACTIVE)
(this.sessions has only one value)  ==>  (this.mode has only one value)
(this.sessions has only one value)  ==>  (this.name has only one value)
(this.sessions has only one value)  ==>  (this.name.toString == "Sandy")
(this.sessions has only one value)  ==>  (this.next_account has only one value)
(this.sessions has only one value)  ==>  (this.status == transactionsystem.UserInfo$UserStatus.GREYLISTED)
(this.sessions has only one value)  ==>  (this.type == transactionsystem.UserInfo$UserType.NORMAL)
(this.sessions has only one value)  ==>  (this.type has only one value)
(this.sessions has only one value)  ==>  (this.type in transactionsystem.UserInfo$UserType.$VALUES[])
(this.sessions has only one value)  ==>  (this.uid == this.next_account)
(this.sessions has only one value)  ==>  (this.uid == this.next_session_id)
(this.sessions has only one value)  ==>  (this.uid == this.numOfTransactionsWhenGreyListed)
(this.sessions has only one value)  ==>  (this.uid has only one value)
(this.sessions has only one value)  ==>  (transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(this.status))
this.mode != null
this.status != null
this.sessions[].getClass().getName() one of { [transactionsystem.UserSession, transactionsystem.UserSession], [transactionsystem.UserSession, transactionsystem.UserSession, transactionsystem.UserSession] }
this.accounts[].getClass().getName() == [transactionsystem.UserAccount]
this.country.toString == "Senegal"
size(this.sessions[]) one of { 2, 3 }
size(this.accounts[]) == 1
this.name.toString == orig(this.name.toString)
this.mode in transactionsystem.UserInfo$UserMode.$VALUES[]
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() != orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
this.status in transactionsystem.UserInfo$UserStatus.$VALUES[]
this.status in orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
transactionsystem.UserInfo$UserStatus.WHITELISTED in orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
transactionsystem.UserInfo$UserStatus.GREYLISTED in orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
transactionsystem.UserInfo$UserStatus.BLACKLISTED in orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
orig(transactionsystem.UserInfo$UserStatus.WHITELISTED) in transactionsystem.UserInfo$UserStatus.$VALUES[]
orig(transactionsystem.UserInfo$UserStatus.GREYLISTED) in transactionsystem.UserInfo$UserStatus.$VALUES[]
orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED) in transactionsystem.UserInfo$UserStatus.$VALUES[]
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[]) (elementwise)
transactionsystem.UserInfo$UserStatus.$VALUES[].getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES[].getClass().getName()) (elementwise)
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() != orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
this.country.toString == orig(this.country.toString)
===========================================================================
transactionsystem.UserInfo.withdrawFrom(java.lang.String, double):::ENTER
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
this.type == transactionsystem.UserInfo$UserType.NORMAL
this.next_session_id == this.numOfTransactionsWhenGreyListed
size(this.sessions[]) == size(this.accounts[])
this.sessions != null
this.sessions[].getClass().getName() == [transactionsystem.UserSession]
this.accounts != null
this.accounts[].getClass().getName() == [transactionsystem.UserAccount]
this.next_session_id has only one value
this.next_session_id != null
this.next_account has only one value
this.next_account != null
this.country != null
this.country.toString one of { "France", "Senegal" }
account_number != null
amount one of { 105.0, 210.0 }
size(this.sessions[]) == 1
this.name.toString > account_number.toString
this.country.toString > account_number.toString
===========================================================================
transactionsystem.UserInfo.withdrawFrom(java.lang.String, double):::EXIT
this.uid == orig(this.uid)
this.name == orig(this.name)
this.mode == transactionsystem.UserInfo$UserMode.ACTIVE
transactionsystem.UserInfo$UserMode.ACTIVE == orig(this.mode)
transactionsystem.UserInfo$UserMode.ACTIVE == orig(transactionsystem.UserInfo$UserMode.ACTIVE)
transactionsystem.UserInfo$UserMode.DISABLED == orig(transactionsystem.UserInfo$UserMode.DISABLED)
transactionsystem.UserInfo$UserMode.FROZEN == orig(transactionsystem.UserInfo$UserMode.FROZEN)
transactionsystem.UserInfo$UserMode.$VALUES == orig(transactionsystem.UserInfo$UserMode.$VALUES)
transactionsystem.UserInfo$UserMode.$VALUES[] == orig(transactionsystem.UserInfo$UserMode.$VALUES[])
this.status == transactionsystem.UserInfo$UserStatus.WHITELISTED
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(this.status)
transactionsystem.UserInfo$UserStatus.WHITELISTED == orig(transactionsystem.UserInfo$UserStatus.WHITELISTED)
transactionsystem.UserInfo$UserStatus.GREYLISTED == orig(transactionsystem.UserInfo$UserStatus.GREYLISTED)
transactionsystem.UserInfo$UserStatus.BLACKLISTED == orig(transactionsystem.UserInfo$UserStatus.BLACKLISTED)
transactionsystem.UserInfo$UserStatus.$VALUES == orig(transactionsystem.UserInfo$UserStatus.$VALUES)
transactionsystem.UserInfo$UserStatus.$VALUES[] == orig(transactionsystem.UserInfo$UserStatus.$VALUES[])
this.type == transactionsystem.UserInfo$UserType.NORMAL
transactionsystem.UserInfo$UserType.GOLD == orig(transactionsystem.UserInfo$UserType.GOLD)
transactionsystem.UserInfo$UserType.SILVER == orig(transactionsystem.UserInfo$UserType.SILVER)
transactionsystem.UserInfo$UserType.NORMAL == orig(this.type)
transactionsystem.UserInfo$UserType.NORMAL == orig(transactionsystem.UserInfo$UserType.NORMAL)
transactionsystem.UserInfo$UserType.$VALUES == orig(transactionsystem.UserInfo$UserType.$VALUES)
transactionsystem.UserInfo$UserType.$VALUES[] == orig(transactionsystem.UserInfo$UserType.$VALUES[])
this.sessions == orig(this.sessions)
this.sessions[] == orig(this.sessions[])
this.accounts == orig(this.accounts)
this.accounts[] == orig(this.accounts[])
this.next_session_id == this.numOfTransactionsWhenGreyListed
this.next_session_id == orig(this.next_session_id)
this.next_session_id == orig(this.numOfTransactionsWhenGreyListed)
this.next_account == orig(this.next_account)
this.country == orig(this.country)
this.accountRequestsPerSession == orig(this.accountRequestsPerSession)
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserStatus.$VALUES[]))
size(transactionsystem.UserInfo$UserMode.$VALUES[]) == orig(size(transactionsystem.UserInfo$UserType.$VALUES[]))
size(this.sessions[]) == size(this.accounts[])
size(this.sessions[]) == orig(size(this.accounts[]))
this.sessions != null
this.sessions[].getClass().getName() == [transactionsystem.UserSession]
this.accounts != null
this.accounts[].getClass().getName() == [transactionsystem.UserAccount]
this.next_session_id has only one value
this.next_session_id != null
this.next_account has only one value
this.next_account != null
this.country != null
this.country.toString one of { "France", "Senegal" }
size(this.sessions[]) == 1
this.name.toString > account_number.toString
this.name.toString == orig(this.name.toString)
transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserMode.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserStatus.$VALUES.getClass().getName())
transactionsystem.UserInfo$UserType.$VALUES.getClass().getName() == orig(transactionsystem.UserInfo$UserType.$VALUES.getClass().getName())
this.country.toString > account_number.toString
this.country.toString == orig(this.country.toString)
account_number.toString == orig(account_number.toString)
===========================================================================
transactionsystem.UserSession:::OBJECT
this.sid != null
this.log != null
this.owner != null
===========================================================================
transactionsystem.UserSession.UserSession(java.lang.Integer, java.lang.Integer):::ENTER
uid != null
sid != null
===========================================================================
transactionsystem.UserSession.UserSession(java.lang.Integer, java.lang.Integer):::EXIT
this.sid == orig(sid)
this.owner == orig(uid)
this.log has only one value
this.log.toString == ""
this.sessionClosed == true
===========================================================================
transactionsystem.UserSession.closeSession():::ENTER
this.sessionClosed == false
===========================================================================
transactionsystem.UserSession.closeSession():::EXIT
this.sid == orig(this.sid)
this.log == orig(this.log)
this.owner == orig(this.owner)
this.sessionClosed == true
this.log.toString == orig(this.log.toString)
===========================================================================
transactionsystem.UserSession.getId():::ENTER
===========================================================================
transactionsystem.UserSession.getId():::EXIT
this.sid == return
this.log == orig(this.log)
this.owner == orig(this.owner)
this.sessionClosed == orig(this.sessionClosed)
return == orig(this.sid)
return != null
this.log.toString == orig(this.log.toString)
===========================================================================
transactionsystem.UserSession.isSessionClosed():::ENTER
===========================================================================
transactionsystem.UserSession.isSessionClosed():::EXIT
this.sid == orig(this.sid)
this.log == orig(this.log)
this.owner == orig(this.owner)
this.sessionClosed == return
return == orig(this.sessionClosed)
this.log.toString == orig(this.log.toString)
===========================================================================
transactionsystem.UserSession.isSessionClosed():::EXIT;condition="return == true"
return == true
===========================================================================
transactionsystem.UserSession.isSessionClosed():::EXIT;condition="not(return == true)"
return == false
===========================================================================
transactionsystem.UserSession.log(java.lang.String):::ENTER
this.sessionClosed == false
l != null
this.log.toString != l.toString
===========================================================================
transactionsystem.UserSession.log(java.lang.String):::EXIT
this.sid == orig(this.sid)
this.owner == orig(this.owner)
this.sessionClosed == orig(this.sessionClosed)
this.sessionClosed == false
this.log.toString != l.toString
this.log.toString > orig(this.log.toString)
l.toString != orig(this.log.toString)
l.toString == orig(l.toString)
===========================================================================
transactionsystem.UserSession.openSession():::ENTER
this.log has only one value
this.log.toString == ""
this.sessionClosed == true
===========================================================================
transactionsystem.UserSession.openSession():::EXIT
this.sid == orig(this.sid)
this.log == orig(this.log)
this.owner == orig(this.owner)
this.log has only one value
this.log.toString == ""
this.sessionClosed == false
this.log.toString == orig(this.log.toString)
